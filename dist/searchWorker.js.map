{
  "version": 3,
  "sources": ["../src/lib/searchWorker.ts"],
  "sourcesContent": ["// Search worker for smooth performance with large prompt lists\r\ninterface SearchQuery {\r\n  q: string;\r\n  showHidden: boolean;\r\n  includeBin: boolean;\r\n  sortBy: 'relevance' | 'title' | 'createdAt' | 'updatedAt' | 'favorite';\r\n  sortOrder: 'asc' | 'desc';\r\n}\r\n\r\ninterface SearchResult {\r\n  id: string;\r\n  title: string;\r\n  body: string;\r\n  tags: string[];\r\n  favorite: boolean;\r\n  hidden: boolean;\r\n  deletedAt?: string;\r\n  source: string;\r\n  relevance: number;\r\n}\r\n\r\n// Light filter logic with tag:, fav:true, hidden:true, bin:true support\r\nfunction parseQuery(query: string): { text: string; tags: string[]; filters: Record<string, boolean> } {\r\n  const filters: Record<string, boolean> = {};\r\n  const tags: string[] = [];\r\n  let text = query;\r\n\r\n  // Extract tag filters\r\n  const tagMatches = query.match(/tag:(\\S+)/g);\r\n  if (tagMatches) {\r\n    tagMatches.forEach(match => {\r\n      const tag = match.replace('tag:', '');\r\n      tags.push(tag);\r\n      text = text.replace(match, '').trim();\r\n    });\r\n  }\r\n\r\n  // Extract boolean filters\r\n  const booleanFilters = ['fav:true', 'hidden:true', 'bin:true'];\r\n  booleanFilters.forEach(filter => {\r\n    if (query.includes(filter)) {\r\n      const key = filter.split(':')[0];\r\n      filters[key] = true;\r\n      text = text.replace(filter, '').trim();\r\n    }\r\n  });\r\n\r\n  return { text, tags, filters };\r\n}\r\n\r\nfunction calculateRelevance(prompt: any, query: string, tags: string[]): number {\r\n  let score = 0;\r\n  const queryLower = query.toLowerCase();\r\n  \r\n  // Title match (highest weight)\r\n  if (prompt.title?.toLowerCase().includes(queryLower)) {\r\n    score += 100;\r\n  }\r\n  \r\n  // Body match\r\n  if (prompt.body?.toLowerCase().includes(queryLower)) {\r\n    score += 50;\r\n  }\r\n  \r\n  // Tag matches\r\n  if (tags.length > 0) {\r\n    const promptTags = prompt.tags || [];\r\n    tags.forEach(tag => {\r\n      if (promptTags.some((pt: string) => pt.toLowerCase().includes(tag.toLowerCase()))) {\r\n        score += 75;\r\n      }\r\n    });\r\n  }\r\n  \r\n  // Favorite bonus (only if there's already a match)\r\n  if (prompt.favorite && score > 0) {\r\n    score += 10;\r\n  }\r\n  \r\n  return score;\r\n}\r\n\r\nfunction filterPrompts(prompts: any[], query: SearchQuery): SearchResult[] {\r\n  const { text, tags, filters } = parseQuery(query.q);\r\n  \r\n  let filtered = prompts.filter(prompt => {\r\n    // Apply filters\r\n    if (filters.fav && !prompt.favorite) return false;\r\n    if (filters.hidden && !prompt.hidden) return false;\r\n    if (filters.bin && !prompt.deletedAt) return false;\r\n    \r\n    // Apply visibility filters\r\n    if (!query.showHidden && prompt.hidden) return false;\r\n    if (!query.includeBin && prompt.deletedAt) return false;\r\n    \r\n    // Apply text search\r\n    if (text) {\r\n      const relevance = calculateRelevance(prompt, text, tags);\r\n      if (relevance === 0) return false;\r\n      prompt.relevance = relevance;\r\n    }\r\n    \r\n    return true;\r\n  });\r\n  \r\n  // Sort results with favorites always first\r\n  if (query.sortBy === 'relevance' && text) {\r\n    filtered.sort((a, b) => {\r\n      // Favorites come first\r\n      if (a.favorite && !b.favorite) return -1;\r\n      if (!a.favorite && b.favorite) return 1;\r\n      // Within the same favorite status, sort by relevance\r\n      return (b.relevance || 0) - (a.relevance || 0);\r\n    });\r\n  } else if (query.sortBy === 'title') {\r\n    filtered.sort((a, b) => {\r\n      // Favorites come first\r\n      if (a.favorite && !b.favorite) return -1;\r\n      if (!a.favorite && b.favorite) return 1;\r\n      // Within the same favorite status, sort by title\r\n      return a.title.localeCompare(b.title);\r\n    });\r\n  } else if (query.sortBy === 'createdAt') {\r\n    filtered.sort((a, b) => {\r\n      // Favorites come first\r\n      if (a.favorite && !b.favorite) return -1;\r\n      if (!a.favorite && b.favorite) return 1;\r\n      // Within the same favorite status, sort by created date\r\n      return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\r\n    });\r\n  } else if (query.sortBy === 'updatedAt') {\r\n    filtered.sort((a, b) => {\r\n      // Favorites come first\r\n      if (a.favorite && !b.favorite) return -1;\r\n      if (!a.favorite && b.favorite) return 1;\r\n      // Within the same favorite status, sort by updated date\r\n      return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime();\r\n    });\r\n  } else if (query.sortBy === 'favorite') {\r\n    filtered.sort((a, b) => (b.favorite ? 1 : 0) - (a.favorite ? 1 : 0));\r\n  } else {\r\n    // Default sorting: favorites first, then by updated date\r\n    filtered.sort((a, b) => {\r\n      // Favorites come first\r\n      if (a.favorite && !b.favorite) return -1;\r\n      if (!a.favorite && b.favorite) return 1;\r\n      // Within the same favorite status, sort by updated date\r\n      return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime();\r\n    });\r\n  }\r\n  \r\n  if (query.sortOrder === 'asc') {\r\n    filtered.reverse();\r\n  }\r\n  \r\n  return filtered.map(p => ({\r\n    id: p.id,\r\n    title: p.title,\r\n    body: p.body,\r\n    tags: p.tags || [],\r\n    favorite: p.favorite,\r\n    hidden: p.hidden,\r\n    deletedAt: p.deletedAt,\r\n    source: p.source,\r\n    relevance: p.relevance || 0\r\n  }));\r\n}\r\n\r\n// Worker message handler\r\nself.onmessage = (e: MessageEvent) => {\r\n  const { prompts, query } = e.data;\r\n  \r\n  try {\r\n    const results = filterPrompts(prompts, query);\r\n    self.postMessage(results);\r\n  } catch (error) {\r\n    self.postMessage({ error: error.message });\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
