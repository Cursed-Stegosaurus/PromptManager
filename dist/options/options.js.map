{
  "version": 3,
  "sources": ["../../src/lib/db.ts", "../../src/lib/auth.chrome.ts", "../../src/lib/drive.ts", "../../src/options/options.ts"],
  "sourcesContent": ["import type { LibraryState, Prompt } from \"./schema\";\r\n\r\nconst DB_NAME = \"prompt-library\";\r\nconst DB_VERSION = 1;\r\nconst STORE = \"prompts\";\r\nconst META = \"meta\";\r\n\r\nexport interface Meta {\r\n  key: string;\r\n  value: any;\r\n}\r\n\r\nexport async function openDb(): Promise<IDBDatabase> {\r\n  return await new Promise((resolve, reject) => {\r\n    const req = indexedDB.open(DB_NAME, DB_VERSION);\r\n    req.onupgradeneeded = () => {\r\n      const db = req.result;\r\n      if (!db.objectStoreNames.contains(STORE)) {\r\n        const s = db.createObjectStore(STORE, { keyPath: \"id\" });\r\n        s.createIndex(\"by_deletedAt\", \"deletedAt\", { unique: false });\r\n      }\r\n      if (!db.objectStoreNames.contains(META)) {\r\n        db.createObjectStore(META, { keyPath: \"key\" });\r\n      }\r\n    };\r\n    req.onsuccess = () => resolve(req.result);\r\n    req.onerror = () => reject(req.error);\r\n  });\r\n}\r\n\r\nexport async function putPrompt(p: Prompt) {\r\n  const db = await openDb();\r\n  await tx(db, STORE, \"readwrite\", store => store.put(p));\r\n}\r\n\r\nexport async function getPrompt(id: string): Promise<Prompt | undefined> {\r\n  const db = await openDb();\r\n  return await tx(db, STORE, \"readonly\", store => reqPromise<Prompt | undefined>(store.get(id)));\r\n}\r\n\r\nexport async function listPrompts(includeDeleted = false): Promise<Prompt[]> {\r\n  const db = await openDb();\r\n  return await tx(db, STORE, \"readonly\", store => new Promise((resolve, reject) => {\r\n    const out: Prompt[] = [];\r\n    const req = store.openCursor();\r\n    req.onsuccess = () => {\r\n      const cur = req.result;\r\n      if (!cur) return resolve(out);\r\n      const val = cur.value as Prompt;\r\n      if (!val.deletedAt || includeDeleted) out.push(val);\r\n      cur.continue();\r\n    };\r\n    req.onerror = () => reject(req.error);\r\n  }));\r\n}\r\n\r\nexport async function putMeta(key: string, value: any) {\r\n  const db = await openDb();\r\n  await tx(db, META, \"readwrite\", store => store.put({ key, value }));\r\n}\r\n\r\nexport async function getMeta<T>(key: string): Promise<T | undefined> {\r\n  const db = await openDb();\r\n  return await tx(db, META, \"readonly\", store => reqPromise<T | undefined>(store.get(key)).then(r => r?.value));\r\n}\r\n\r\nfunction tx<T>(db: IDBDatabase, name: string, mode: IDBTransactionMode, fn: (store: IDBObjectStore) => any): Promise<T> {\r\n  return new Promise((resolve, reject) => {\r\n    const t = db.transaction(name, mode);\r\n    const store = t.objectStore(name);\r\n    let result: any;\r\n    try { result = fn(store); } catch (e) { reject(e); return; }\r\n    t.oncomplete = () => resolve(result);\r\n    t.onerror = () => reject(t.error);\r\n    t.onabort = () => reject(t.error);\r\n  });\r\n}\r\n\r\nfunction reqPromise<T>(req: IDBRequest): Promise<T> {\r\n  return new Promise((resolve, reject) => {\r\n    req.onsuccess = () => resolve(req.result as T);\r\n    req.onerror = () => reject(req.error);\r\n  });\r\n}\r\n", "export async function getChromeAccessToken(): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    chrome.identity.getAuthToken({ interactive: true }, token => {\r\n      if (chrome.runtime.lastError || !token) {\r\n        reject(chrome.runtime.lastError?.message || \"No token\");\r\n      } else {\r\n        resolve(token);\r\n      }\r\n    });\r\n  });\r\n}\r\n", "import { getChromeAccessToken } from \"./auth.chrome\";\r\n\r\nconst DRIVE_FILES = \"https://www.googleapis.com/drive/v3/files\";\r\nconst DRIVE_UPLOAD = \"https://www.googleapis.com/upload/drive/v3/files\";\r\nconst APPDATA_Q = \"name = 'prompt-library-backup.json' and 'appDataFolder' in parents\";\r\n\r\nexport async function backupToDrive(payload: object): Promise<void> {\r\n  const token = await getChromeAccessToken();\r\n  const id = await findExisting(token);\r\n  if (id) {\r\n    await uploadContent(token, id, JSON.stringify(payload));\r\n  } else {\r\n    const newId = await createFile(token);\r\n    await uploadContent(token, newId, JSON.stringify(payload));\r\n  }\r\n}\r\n\r\nexport async function restoreFromDrive<T>(): Promise<T | null> {\r\n  const token = await getChromeAccessToken();\r\n  const id = await findExisting(token);\r\n  if (!id) return null;\r\n  const res = await fetch(`${DRIVE_FILES}/${id}?alt=media`, {\r\n    headers: { Authorization: `Bearer ${token}` }\r\n  });\r\n  if (!res.ok) throw new Error(\"Restore failed\");\r\n  return res.json() as Promise<T>;\r\n}\r\n\r\nexport async function mergeWithLocal<T extends { prompts?: any[]; meta?: any[] }>(\r\n  driveData: T,\r\n  localPrompts: any[],\r\n  localMeta: any[]\r\n): Promise<{ prompts: any[]; meta: any[] }> {\r\n  const drivePrompts = driveData.prompts || [];\r\n  const driveMeta = driveData.meta || [];\r\n  \r\n  // Merge prompts, keeping the most recently updated version\r\n  const promptMap = new Map();\r\n  \r\n  // Add local prompts first\r\n  localPrompts.forEach(prompt => {\r\n    promptMap.set(prompt.id, prompt);\r\n  });\r\n  \r\n  // Merge with drive prompts, keeping the newer version\r\n  drivePrompts.forEach(drivePrompt => {\r\n    const localPrompt = promptMap.get(drivePrompt.id);\r\n    if (!localPrompt || new Date(drivePrompt.updatedAt) > new Date(localPrompt.updatedAt)) {\r\n      promptMap.set(drivePrompt.id, drivePrompt);\r\n    }\r\n  });\r\n  \r\n  // Merge meta data similarly\r\n  const metaMap = new Map();\r\n  localMeta.forEach(meta => {\r\n    metaMap.set(meta.key, meta);\r\n  });\r\n  \r\n  driveMeta.forEach(driveMetaItem => {\r\n    const localMetaItem = metaMap.get(driveMetaItem.key);\r\n    if (!localMetaItem || new Date(driveMetaItem.updatedAt) > new Date(localMetaItem.updatedAt)) {\r\n      metaMap.set(driveMetaItem.key, driveMetaItem);\r\n    }\r\n  });\r\n  \r\n  return {\r\n    prompts: Array.from(promptMap.values()),\r\n    meta: Array.from(metaMap.values())\r\n  };\r\n}\r\n\r\nasync function findExisting(token: string): Promise<string | null> {\r\n  const url = `${DRIVE_FILES}?spaces=appDataFolder&q=${encodeURIComponent(APPDATA_Q)}&fields=files(id,name)`;\r\n  const res = await fetch(url, { headers: { Authorization: `Bearer ${token}` } });\r\n  if (!res.ok) throw new Error(\"Drive list failed\");\r\n  const json = await res.json();\r\n  return json.files?.[0]?.id || null;\r\n}\r\n\r\nasync function createFile(token: string): Promise<string> {\r\n  const meta = { name: \"prompt-library-backup.json\", parents: [\"appDataFolder\"] };\r\n  const init = await fetch(`${DRIVE_UPLOAD}?uploadType=resumable`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json; charset=UTF-8\",\r\n      \"X-Upload-Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(meta)\r\n  });\r\n  if (!init.ok) throw new Error(\"Init upload failed\");\r\n  const loc = init.headers.get(\"location\");\r\n  if (!loc) throw new Error(\"No upload session\");\r\n  const put = await fetch(loc, { method: \"PUT\", headers: { Authorization: `Bearer ${token}` }, body: \"{}\" });\r\n  if (!put.ok) throw new Error(\"Create file failed\");\r\n  const created = await put.json();\r\n  return created.id as string;\r\n}\r\n\r\nasync function uploadContent(token: string, id: string, body: string) {\r\n  const res = await fetch(`${DRIVE_UPLOAD}/${id}?uploadType=media`, {\r\n    method: \"PATCH\",\r\n    headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/json\" },\r\n    body\r\n  });\r\n  if (!res.ok) throw new Error(\"Backup failed\");\r\n}\r\n", "import { getMeta, putMeta, listPrompts } from \"../lib/db\";\r\nimport { backupToDrive, restoreFromDrive } from \"../lib/drive\";\r\n\r\nconst enableDrive = document.getElementById(\"enableDrive\") as HTMLInputElement;\r\nconst btnBackup = document.getElementById(\"btnBackup\") as HTMLButtonElement;\r\nconst btnRestore = document.getElementById(\"btnRestore\") as HTMLButtonElement;\r\nconst status = document.getElementById(\"backupStatus\") as HTMLElement;\r\n\r\nconst enableEnc = document.getElementById(\"enableEnc\") as HTMLInputElement;\r\nconst pass1 = document.getElementById(\"pass1\") as HTMLInputElement;\r\nconst pass2 = document.getElementById(\"pass2\") as HTMLInputElement;\r\nconst btnSetPass = document.getElementById(\"btnSetPass\") as HTMLButtonElement;\r\n\r\nconst fileImport = document.getElementById(\"fileImport\") as HTMLInputElement;\r\nconst btnImport = document.getElementById(\"btnImport\") as HTMLButtonElement;\r\nconst btnExport = document.getElementById(\"btnExport\") as HTMLButtonElement;\r\n\r\ninit();\r\n\r\nasync function init() {\r\n  const drive = await getMeta<boolean>(\"driveBackupEnabled\");\r\n  enableDrive.checked = !!drive;\r\n  const last = await getMeta<string>(\"driveLastBackupAt\");\r\n  status.textContent = `Last backup: ${last || \"never\"}`;\r\n}\r\n\r\nenableDrive.onchange = async () => {\r\n  await putMeta(\"driveBackupEnabled\", enableDrive.checked);\r\n};\r\n\r\nbtnBackup.onclick = async () => {\r\n  const payload = { schemaVersion: \"1.0.0\", exportedAt: new Date().toISOString(), prompts: await listPrompts(true) };\r\n  try {\r\n    await backupToDrive(payload);\r\n    await putMeta(\"driveLastBackupAt\", new Date().toISOString());\r\n    status.textContent = `Last backup: ${new Date().toLocaleString()}`;\r\n    alert(\"Backup complete\");\r\n  } catch (e) {\r\n    alert(\"Backup failed: \" + (e as Error).message);\r\n  }\r\n};\r\n\r\nbtnRestore.onclick = async () => {\r\n  try {\r\n    const data = await restoreFromDrive<any>();\r\n    if (!data) { alert(\"No backup found\"); return; }\r\n    // For v1.0, just preview counts.\r\n    alert(`Backup found. Prompts: ${data.prompts?.length ?? 0}`);\r\n  } catch (e) {\r\n    alert(\"Restore failed: \" + (e as Error).message);\r\n  }\r\n};\r\n\r\nbtnSetPass.onclick = async () => {\r\n  if (!enableEnc.checked) { alert(\"Enable the checkbox first\"); return; }\r\n  if (!pass1.value || pass1.value !== pass2.value) { alert(\"Passphrases do not match\"); return; }\r\n  await putMeta(\"encryptionEnabled\", true);\r\n  alert(\"Encryption enabled. Remember your passphrase.\");\r\n};\r\n\r\nbtnImport.onclick = async () => {\r\n  const file = fileImport.files?.[0];\r\n  if (!file) { alert(\"Choose a file\"); return; }\r\n  const text = await file.text();\r\n  const json = JSON.parse(text);\r\n  alert(`Import preview: prompts ${json.prompts?.length ?? 0}`);\r\n};\r\n\r\nbtnExport.onclick = async () => {\r\n  const payload = { schemaVersion: \"1.0.0\", exportedAt: new Date().toISOString(), prompts: await listPrompts(true) };\r\n  const blob = new Blob([JSON.stringify(payload, null, 2)], { type: \"application/json\" });\r\n  const url = URL.createObjectURL(blob);\r\n  const a = document.createElement(\"a\");\r\n  a.href = url;\r\n  a.download = `prompt-library-backup-${Date.now()}.json`;\r\n  a.click();\r\n  URL.revokeObjectURL(url);\r\n};\r\n"],
  "mappings": "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",
  "names": ["init"]
}
