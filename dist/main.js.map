{
  "version": 3,
  "sources": ["../src/lib/db.ts", "../src/sidepanel/main.ts"],
  "sourcesContent": ["import type { LibraryState, Prompt } from \"./schema\";\r\n\r\nconst DB_NAME = \"prompt-library\";\r\nconst DB_VERSION = 2; // Bumped to force schema upgrade\r\nconst STORE = \"prompts\";\r\nconst META = \"meta\";\r\n\r\nexport interface Meta {\r\n  key: string;\r\n  value: any;\r\n}\r\n\r\nexport async function openDb(): Promise<IDBDatabase> {\r\n  return await new Promise((resolve, reject) => {\r\n    const req = indexedDB.open(DB_NAME, DB_VERSION);\r\n    \r\n    req.onupgradeneeded = (event) => {\r\n      console.log('Database upgrade needed, creating schema...');\r\n      const db = req.result;\r\n      \r\n      // Create prompts store if it doesn't exist\r\n      if (!db.objectStoreNames.contains(STORE)) {\r\n        console.log('Creating prompts store...');\r\n        const s = db.createObjectStore(STORE, { keyPath: \"id\" });\r\n        \r\n        // Create indexes\r\n        console.log('Creating database indexes...');\r\n        try {\r\n          s.createIndex(\"by_deletedAt\", \"deletedAt\", { unique: false });\r\n          s.createIndex(\"by_hidden\", \"hidden\", { unique: false });\r\n          s.createIndex(\"by_favorite\", \"favorite\", { unique: false });\r\n          s.createIndex(\"by_source\", \"source\", { unique: false });\r\n          console.log('All indexes created successfully');\r\n        } catch (indexError) {\r\n          console.error('Error creating indexes:', indexError);\r\n          // Continue anyway - indexes are optional\r\n        }\r\n      }\r\n      \r\n      // Create meta store if it doesn't exist\r\n      if (!db.objectStoreNames.contains(META)) {\r\n        console.log('Creating meta store...');\r\n        db.createObjectStore(META, { keyPath: \"key\" });\r\n      }\r\n    };\r\n    \r\n    req.onsuccess = () => {\r\n      console.log('Database opened successfully');\r\n      resolve(req.result);\r\n    };\r\n    \r\n    req.onerror = () => {\r\n      console.error('Database open error:', req.error);\r\n      reject(req.error);\r\n    };\r\n  });\r\n}\r\n\r\nexport async function putPrompt(p: Prompt) {\r\n  const db = await openDb();\r\n  await tx(db, STORE, \"readwrite\", store => store.put(p));\r\n}\r\n\r\n// Raw database functions (without migration)\r\nasync function getPromptRaw(id: string): Promise<Prompt | undefined> {\r\n  try {\r\n    console.log('getPromptRaw: Getting prompt with ID:', id);\r\n    const db = await openDb();\r\n    const result = await tx<Prompt | undefined>(db, STORE, \"readonly\", store => reqPromise<Prompt | undefined>(store.get(id)));\r\n    console.log('getPromptRaw: Result:', result);\r\n    return result;\r\n  } catch (error) {\r\n    console.error('getPromptRaw: Error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function listPromptsRaw(includeDeleted = false): Promise<Prompt[]> {\r\n  try {\r\n    console.log('listPromptsRaw: Starting with includeDeleted =', includeDeleted);\r\n    const db = await openDb();\r\n    console.log('listPromptsRaw: Database opened successfully');\r\n    \r\n    const result = await tx<Prompt[]>(db, STORE, \"readonly\", store => new Promise<Prompt[]>((resolve, reject) => {\r\n      const out: Prompt[] = [];\r\n      const req = store.openCursor();\r\n      req.onsuccess = () => {\r\n        const cur = req.result as IDBCursorWithValue | null;\r\n        if (!cur) {\r\n          console.log('listPromptsRaw: Cursor completed, total prompts found:', out.length);\r\n          return resolve(out);\r\n        }\r\n        const val = cur.value as Prompt;\r\n        if (!val.deletedAt || includeDeleted) out.push(val);\r\n        cur.continue();\r\n      };\r\n      req.onerror = () => reject(req.error);\r\n    }));\r\n    \r\n    console.log('listPromptsRaw: Final result:', result.length, result);\r\n    \r\n    // Get usage analytics for sorting\r\n    const { topUsedPrompts } = await getAnalytics();\r\n    \r\n    // Sort prompts: first by usage count (descending), then alphabetically by title\r\n    const sortedResult = result.sort((a, b) => {\r\n      // Get usage count for each prompt\r\n      const aUsage = topUsedPrompts.find((p: { promptId: string; usageCount: number; lastUsed: string }) => p.promptId === a.id)?.usageCount || 0;\r\n      const bUsage = topUsedPrompts.find((p: { promptId: string; usageCount: number; lastUsed: string }) => p.promptId === b.id)?.usageCount || 0;\r\n      \r\n      // First sort by usage count (descending)\r\n      if (aUsage !== bUsage) {\r\n        return bUsage - aUsage;\r\n      }\r\n      \r\n      // Then sort alphabetically by title\r\n      return a.title.localeCompare(b.title);\r\n    });\r\n    \r\n    return sortedResult;\r\n  } catch (error) {\r\n    console.error('listPromptsRaw: Error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Enhanced getPrompt with auto-migration\r\nexport async function getPrompt(id: string): Promise<Prompt | null> {\r\n  try {\r\n    const prompt = await getPromptRaw(id);\r\n    if (prompt && (prompt.source as any) === 'seed') {\r\n      // Auto-migrate legacy data\r\n      console.log(`Auto-migrating prompt ${id} from 'seed' to 'starter'`);\r\n      (prompt as any).source = 'starter';\r\n      await putPrompt(prompt); // Save migrated version\r\n    }\r\n    return prompt || null;\r\n  } catch (error) {\r\n    console.error('Failed to get prompt:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// Enhanced listPrompts with auto-migration\r\nexport async function listPrompts(includeDeleted = false): Promise<Prompt[]> {\r\n  try {\r\n    console.log('listPrompts: Starting with includeDeleted =', includeDeleted);\r\n    const prompts = await listPromptsRaw(includeDeleted);\r\n    console.log('listPrompts: Raw prompts from DB:', prompts.length, prompts);\r\n    \r\n    // Check if any prompts need migration\r\n    let needsMigration = false;\r\n    const migratedPrompts = prompts.map(prompt => {\r\n      if ((prompt.source as any) === 'seed') {\r\n        needsMigration = true;\r\n        return { ...prompt, source: 'starter' as const };\r\n      }\r\n      return prompt;\r\n    });\r\n    \r\n    console.log('listPrompts: Migration needed?', needsMigration);\r\n    console.log('listPrompts: Migrated prompts:', migratedPrompts.length, migratedPrompts);\r\n    \r\n    // Save migrated prompts if needed\r\n    if (needsMigration) {\r\n      console.log(`Auto-migrating ${migratedPrompts.filter(p => (p.source as any) === 'seed').length} prompts`);\r\n      await Promise.all(migratedPrompts.map(p => putPrompt(p)));\r\n      \r\n      // Mark migration as completed\r\n      await putMeta('migrationCompleted', true);\r\n      await putMeta('migrationTimestamp', new Date().toISOString());\r\n      await putMeta('migrationVersion', '2.0.0');\r\n      \r\n      console.log('Auto-migration completed and marked as complete');\r\n    }\r\n    \r\n    // Get usage analytics for sorting\r\n    const { topUsedPrompts } = await getAnalytics();\r\n    \r\n    // Sort prompts: first by usage count (descending), then alphabetically by title\r\n    const sortedPrompts = migratedPrompts.sort((a, b) => {\r\n      // Get usage count for each prompt\r\n      const aUsage = topUsedPrompts.find((p: { promptId: string; usageCount: number; lastUsed: string }) => p.promptId === a.id)?.usageCount || 0;\r\n      const bUsage = topUsedPrompts.find((p: { promptId: string; usageCount: number; lastUsed: string }) => p.promptId === b.id)?.usageCount || 0;\r\n      \r\n      // First sort by usage count (descending)\r\n      if (aUsage !== bUsage) {\r\n        return bUsage - aUsage;\r\n      }\r\n      \r\n      // Then sort alphabetically by title\r\n      return a.title.localeCompare(b.title);\r\n    });\r\n    \r\n    return sortedPrompts;\r\n  } catch (error) {\r\n    console.error('Failed to list prompts:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function putMeta(key: string, value: any) {\r\n  const db = await openDb();\r\n  await tx(db, META, \"readwrite\", store => store.put({ key, value }));\r\n}\r\n\r\nexport async function getMeta<T>(key: string): Promise<T | undefined> {\r\n  const db = await openDb();\r\n  return await tx(db, META, \"readonly\", store => {\r\n    const req = store.get(key);\r\n    return reqPromise<{ key: string; value: T } | undefined>(req).then(r => r?.value);\r\n  });\r\n}\r\n\r\nexport async function deletePrompt(id: string) {\r\n  const db = await openDb();\r\n  const prompt = await getPrompt(id);\r\n  if (prompt) {\r\n    prompt.deletedAt = new Date().toISOString();\r\n    prompt.updatedAt = new Date().toISOString();\r\n    // Clear favorite flag when deleting\r\n    prompt.favorite = false;\r\n    await putPrompt(prompt);\r\n  }\r\n}\r\n\r\nexport async function restorePrompt(id: string) {\r\n  const db = await openDb();\r\n  const prompt = await getPrompt(id);\r\n  if (prompt && prompt.deletedAt) {\r\n    prompt.deletedAt = undefined;\r\n    prompt.updatedAt = new Date().toISOString();\r\n    await putPrompt(prompt);\r\n  }\r\n}\r\n\r\nexport async function toggleFavorite(id: string) {\r\n  const db = await openDb();\r\n  const prompt = await getPrompt(id);\r\n  if (prompt) {\r\n    prompt.favorite = !prompt.favorite;\r\n    prompt.updatedAt = new Date().toISOString();\r\n    await putPrompt(prompt);\r\n  }\r\n}\r\n\r\nexport async function toggleHidden(id: string) {\r\n  const db = await openDb();\r\n  const prompt = await getPrompt(id);\r\n  if (prompt) {\r\n    prompt.hidden = !prompt.hidden;\r\n    prompt.updatedAt = new Date().toISOString();\r\n    // Clear favorite flag when hiding (but not when unhiding)\r\n    if (prompt.hidden) {\r\n      prompt.favorite = false;\r\n    }\r\n    await putPrompt(prompt);\r\n  }\r\n}\r\n\r\nexport async function permanentlyDeletePrompt(id: string) {\r\n  const db = await openDb();\r\n  return await tx(db, STORE, \"readwrite\", store => {\r\n    return reqPromise(store.delete(id));\r\n  });\r\n}\r\n\r\nexport async function purgeDeletedPrompts(olderThanDays: number = 30) {\r\n  const db = await openDb();\r\n  const cutoff = new Date();\r\n  cutoff.setDate(cutoff.getDate() - olderThanDays);\r\n  \r\n  return await tx(db, STORE, \"readwrite\", store => new Promise((resolve, reject) => {\r\n    const req = store.openCursor();\r\n    const deletedIds: string[] = [];\r\n    \r\n    req.onsuccess = () => {\r\n      const cur = req.result as IDBCursorWithValue | null;\r\n      if (!cur) return resolve(deletedIds);\r\n      \r\n      const prompt = cur.value as Prompt;\r\n      if (prompt.deletedAt && new Date(prompt.deletedAt) < cutoff) {\r\n        deletedIds.push(prompt.id);\r\n        store.delete(prompt.id);\r\n      }\r\n      cur.continue();\r\n    };\r\n    req.onerror = () => reject(req.error);\r\n  }));\r\n}\r\n\r\n// Analytics functions\r\nexport async function incrementPromptUsage(promptId: string) {\r\n  try {\r\n    // Get current analytics data\r\n    const totalUsed = await getMeta<number>('totalPromptsUsed') ?? 0;\r\n    const topUsed = await getMeta<Array<{ promptId: string; usageCount: number; lastUsed: string }>>('topUsedPrompts') ?? [];\r\n    \r\n    // Increment total counter\r\n    await putMeta('totalPromptsUsed', totalUsed + 1);\r\n    \r\n    // Update individual prompt usage\r\n    const now = new Date().toISOString();\r\n    const existingIndex = topUsed.findIndex(p => p.promptId === promptId);\r\n    \r\n    if (existingIndex >= 0) {\r\n      // Update existing entry\r\n      topUsed[existingIndex].usageCount += 1;\r\n      topUsed[existingIndex].lastUsed = now;\r\n    } else {\r\n      // Add new entry\r\n      topUsed.push({ promptId, usageCount: 1, lastUsed: now });\r\n    }\r\n    \r\n    // Sort by usage count (highest first) and keep top 5\r\n    topUsed.sort((a, b) => b.usageCount - a.usageCount);\r\n    const top5 = topUsed.slice(0, 5);\r\n    \r\n    // Save updated top 5\r\n    await putMeta('topUsedPrompts', top5);\r\n    \r\n    return { totalUsed: totalUsed + 1, topUsed: top5 };\r\n  } catch (error) {\r\n    console.error('Failed to increment prompt usage:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getAnalytics() {\r\n  try {\r\n    const totalUsed = await getMeta<number>('totalPromptsUsed') ?? 0;\r\n    const topUsed = await getMeta<Array<{ promptId: string; usageCount: number; lastUsed: string }>>('topUsedPrompts') ?? [];\r\n    \r\n    return {\r\n      totalPromptsUsed: totalUsed,\r\n      topUsedPrompts: topUsed\r\n    };\r\n  } catch (error) {\r\n    console.error('Failed to get analytics:', error);\r\n    return {\r\n      totalPromptsUsed: 0,\r\n      topUsedPrompts: []\r\n    };\r\n  }\r\n}\r\n\r\nfunction tx<T>(db: IDBDatabase, name: string, mode: IDBTransactionMode, fn: (store: IDBObjectStore) => any): Promise<T> {\r\n  return new Promise((resolve, reject) => {\r\n    const t = db.transaction(name, mode);\r\n    const store = t.objectStore(name);\r\n    let result: any;\r\n    try { result = fn(store); } catch (e) { reject(e); return; }\r\n    t.oncomplete = () => resolve(result);\r\n    t.onerror = () => reject(t.error);\r\n    t.onabort = () => reject(t.error);\r\n  });\r\n}\r\n\r\nfunction reqPromise<T>(req: IDBRequest): Promise<T> {\r\n  return new Promise((resolve, reject) => {\r\n    req.onsuccess = () => resolve(req.result as T);\r\n    req.onerror = () => reject(req.error);\r\n  });\r\n}\r\n", "import { openDb, putPrompt, getPrompt, listPrompts, deletePrompt, restorePrompt, toggleFavorite, toggleHidden, putMeta, getMeta, permanentlyDeletePrompt, incrementPromptUsage } from '../lib/db.js';\r\nimport type { Prompt } from '../lib/schema.js';\r\n\r\n// Chrome API types\r\ndeclare const chrome: {\r\n  runtime: {\r\n    sendMessage: (message: any) => Promise<any>;\r\n    getURL: (path: string) => string;\r\n    openOptionsPage: () => void;\r\n    onMessage: {\r\n      addListener: (callback: (message: any, sender: any, sendResponse: any) => void) => void;\r\n    };\r\n  };\r\n};\r\n\r\n// DOM elements\r\nconst searchInput = document.getElementById('search') as HTMLInputElement;\r\nconst clearSearchBtn = document.getElementById('clear-search') as HTMLButtonElement;\r\nconst promptsList = document.getElementById('prompts-list') as HTMLDivElement;\r\nconst hiddenToggle = document.getElementById('hidden-toggle') as HTMLDivElement;\r\nconst hiddenContent = document.getElementById('hidden-content') as HTMLDivElement;\r\nconst hiddenPromptsList = document.getElementById('hidden-prompts-list') as HTMLDivElement;\r\nconst binToggle = document.getElementById('bin-toggle') as HTMLDivElement;\r\nconst binContent = document.getElementById('bin-content') as HTMLDivElement;\r\nconst binPromptsList = document.getElementById('bin-prompts-list') as HTMLDivElement;\r\nconst detailSection = document.getElementById('detail-section') as HTMLDivElement;\r\nconst detailTitle = document.getElementById('detail-title') as HTMLInputElement;\r\nconst detailBody = document.getElementById('detail-body') as HTMLTextAreaElement;\r\nconst insertButton = document.getElementById('btn-insert') as HTMLButtonElement;\r\nconst copyButton = document.getElementById('btn-copy') as HTMLButtonElement;\r\nconst saveButton = document.getElementById('btn-save') as HTMLButtonElement;\r\nconst optionsButton = document.getElementById('btn-options') as HTMLButtonElement;\r\nconst toastContainer = document.getElementById('toast-container') as HTMLDivElement;\r\n\r\n// State\r\nlet currentPromptId: string | null = null;\r\nlet prompts: Prompt[] = [];\r\nlet searchWorker: Worker | null = null;\r\nlet searchState = {\r\n  showHidden: false,\r\n  includeBin: false\r\n};\r\n\r\n// Initialize the sidepanel\r\nasync function init() {\r\n  try {\r\n    // Load prompts first\r\n    await refresh();\r\n    \r\n    // Load hidden and deleted prompts immediately\r\n    await loadHiddenPrompts();\r\n    await loadBinPrompts();\r\n    \r\n    // Wire up event listeners\r\n    wireEvents();\r\n    \r\n    // Set up search worker\r\n    setupSearchWorker();\r\n    \r\n    // Load starters if needed\r\n    await ensureStartersLoaded();\r\n    \r\n    // Set up periodic refresh to keep sections up-to-date\r\n    setInterval(async () => {\r\n      try {\r\n        await loadHiddenPrompts();\r\n        await loadBinPrompts();\r\n      } catch (error) {\r\n        console.error('Periodic refresh failed:', error);\r\n      }\r\n    }, 5000); // Refresh every 5 seconds\r\n    \r\n    console.log('Sidepanel initialized successfully');\r\n  } catch (error) {\r\n    console.error('Failed to initialize sidepanel:', error);\r\n    showToast('Failed to initialize sidepanel', 'error');\r\n  }\r\n}\r\n\r\n// Ensure starters are loaded\r\nasync function ensureStartersLoaded() {\r\n  try {\r\n    const started = await getMeta<boolean>(\"starterLoaded\");\r\n    if (!started) {\r\n      await chrome.runtime.sendMessage({ type: \"starter:ensure\" });\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to check starters:', error);\r\n  }\r\n}\r\n\r\n// Initialize search worker\r\nfunction setupSearchWorker() {\r\n  try {\r\n    searchWorker = new Worker(chrome.runtime.getURL('searchWorker.js'));\r\n    searchWorker.onmessage = (e) => {\r\n      const results = e.data;\r\n      if (results.error) {\r\n        console.error('Search worker error:', results.error);\r\n        return;\r\n      }\r\n      displayResults(results);\r\n    };\r\n  } catch (error) {\r\n    console.warn('Search worker not available, falling back to basic search');\r\n  }\r\n}\r\n\r\n// Wire up event listeners\r\nfunction wireEvents() {\r\n  // Search\r\n  searchInput.addEventListener('input', performSearch);\r\n  clearSearchBtn.addEventListener('click', clearSearch);\r\n  \r\n  // Toggle sections\r\n  hiddenToggle.addEventListener('click', () => toggleSection(hiddenToggle, hiddenContent));\r\n  binToggle.addEventListener('click', () => toggleSection(binToggle, binContent));\r\n  \r\n  // Detail actions\r\n  insertButton.addEventListener('click', insertCurrentPrompt);\r\n  copyButton.addEventListener('click', copyCurrentPrompt);\r\n  saveButton.addEventListener('click', saveCurrentPrompt);\r\n  optionsButton.addEventListener('click', openOptions);\r\n  \r\n  // Listen for prompt updates from options page\r\n  chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n    if (message.type === \"prompts:updated\") {\r\n      console.log('Sidebar received prompts:updated message, refreshing...');\r\n      refresh();\r\n      loadHiddenPrompts();\r\n      loadBinPrompts();\r\n    }\r\n  });\r\n  \r\n  // Keyboard shortcuts\r\n  document.addEventListener('keydown', (e) => {\r\n    if (e.altKey) {\r\n      switch (e.key.toLowerCase()) {\r\n        case 'p':\r\n          e.preventDefault();\r\n          if (currentPromptId) {\r\n            insertCurrentPrompt();\r\n          }\r\n          break;\r\n        case 'i':\r\n          e.preventDefault();\r\n          if (detailBody.value) {\r\n            copyCurrentPrompt();\r\n          }\r\n          break;\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// Toggle section visibility\r\nfunction toggleSection(toggle: HTMLElement, content: HTMLElement) {\r\n  const isExpanded = toggle.classList.contains('expanded');\r\n  if (isExpanded) {\r\n    toggle.classList.remove('expanded');\r\n    content.classList.remove('expanded');\r\n  } else {\r\n    toggle.classList.add('expanded');\r\n    content.classList.add('expanded');\r\n    // Always refresh content when expanding sections to ensure up-to-date data\r\n    if (toggle === hiddenToggle) {\r\n      loadHiddenPrompts();\r\n    } else if (toggle === binToggle) {\r\n      loadBinPrompts();\r\n    }\r\n  }\r\n}\r\n\r\n// Clear search\r\nfunction clearSearch() {\r\n  searchInput.value = '';\r\n  clearSearchBtn.classList.remove('visible');\r\n  performSearch();\r\n}\r\n\r\n// Perform search using worker or fallback\r\nasync function performSearch() {\r\n  const query = searchInput.value.trim();\r\n  \r\n  // Show/hide clear button\r\n  if (query) {\r\n    clearSearchBtn.classList.add('visible');\r\n  } else {\r\n    clearSearchBtn.classList.remove('visible');\r\n  }\r\n  \r\n  if (searchWorker) {\r\n    // Use search worker for smooth performance\r\n    searchWorker.postMessage({\r\n      prompts,\r\n      query: {\r\n        q: query,\r\n        showHidden: searchState.showHidden,\r\n        includeBin: searchState.includeBin,\r\n        sortBy: 'updatedAt',\r\n        sortOrder: 'desc'\r\n      }\r\n    });\r\n  } else {\r\n    // Fallback to basic search\r\n    const results = performBasicSearch(query);\r\n    displayResults(results);\r\n  }\r\n}\r\n\r\n// Consistent sorting function for all prompt lists (same as options page)\r\nfunction sortPromptsByPriority(prompts: any[]): any[] {\r\n  return [...prompts].sort((a, b) => {\r\n    // First: sort by favorite status (favorites come first)\r\n    if (a.favorite && !b.favorite) return -1;\r\n    if (!a.favorite && b.favorite) return 1;\r\n    \r\n    // Within the same favorite status, maintain database order (usage count then alphabetical)\r\n    // This ensures consistent sorting across all sections\r\n    return 0; // Maintain database order within each favorite group\r\n  });\r\n}\r\n\r\n// Basic search fallback\r\nfunction performBasicSearch(query: string): any[] {\r\n  if (!query) {\r\n    // Show all non-hidden, non-deleted prompts when no search query\r\n    const filtered = prompts.filter(p => !p.hidden && !p.deletedAt);\r\n    // Sort with favorites first, then by usage count and alphabetical\r\n    return sortPromptsByPriority(filtered);\r\n  }\r\n\r\n  const terms = query.toLowerCase().split(/\\s+/);\r\n  const filtered = prompts.filter(p => {\r\n    if (!searchState.showHidden && p.hidden) return false;\r\n    if (!searchState.includeBin && p.deletedAt) return false;\r\n    \r\n    const searchableText = `${p.title} ${p.tags.join(' ')} ${p.body}`.toLowerCase();\r\n    return terms.every(term => searchableText.includes(term));\r\n  });\r\n\r\n  // Sort with favorites first, then by usage count and alphabetical\r\n  return sortPromptsByPriority(filtered);\r\n}\r\n\r\n// Display search results\r\nfunction displayResults(results: any[]) {\r\n  promptsList.innerHTML = '';\r\n  \r\n  if (results.length === 0) {\r\n    promptsList.innerHTML = `\r\n      <div class=\"empty-state\">\r\n        <div class=\"empty-state-icon\">\uD83D\uDD0D</div>\r\n        <div class=\"empty-state-title\">No prompts found</div>\r\n        <div class=\"empty-state-message\">Try adjusting your search or filters</div>\r\n      </div>\r\n    `;\r\n    return;\r\n  }\r\n  \r\n  results.forEach(prompt => {\r\n    const promptElement = createPromptElement(prompt);\r\n    promptsList.appendChild(promptElement);\r\n  });\r\n}\r\n\r\n// Create prompt element\r\nfunction createPromptElement(prompt: Prompt): HTMLElement {\r\n  const div = document.createElement('div');\r\n  div.className = `prompt-item ${prompt.id === currentPromptId ? 'active' : ''} ${prompt.favorite ? 'favorite' : ''} ${prompt.hidden ? 'hidden' : ''}`;\r\n  \r\n  div.setAttribute('data-prompt-id', prompt.id);\r\n  div.innerHTML = `\r\n    <div class=\"prompt-header\">\r\n      <div class=\"prompt-title\">${escapeHtml(prompt.title)}</div>\r\n      <div class=\"prompt-actions\">\r\n        ${prompt.deletedAt ? \r\n          // Deleted prompts: only restore and permanent delete\r\n          `<button class=\"action-btn\" data-action=\"restore\" title=\"Restore prompt\"><img src=\"../assets/icons/restore32.png\" alt=\"Restore\" class=\"action-icon\" /></button>\r\n           <button class=\"action-btn danger\" data-action=\"permanentDelete\" title=\"Delete permanently\"><img src=\"../assets/icons/delete32.png\" alt=\"Delete Permanently\" class=\"action-icon\" /></button>` :\r\n          prompt.hidden ?\r\n          // Hidden prompts: only show visibility toggle\r\n          `<button class=\"action-btn\" data-action=\"hide\" title=\"Show prompt\">\r\n             <img src=\"../assets/icons/hide32.png\" alt=\"Show\" class=\"action-icon\" />\r\n           </button>` :\r\n          // Active prompts: normal actions\r\n          `<button class=\"action-btn\" data-action=\"fav\" title=\"${prompt.favorite ? 'Remove from favorites' : 'Add to favorites'}\">\r\n             <img src=\"../assets/icons/${prompt.favorite ? 'fav-f32.png' : 'fav-s32.png'}\" alt=\"Favorite\" class=\"action-icon\" />\r\n           </button>\r\n           <button class=\"action-btn\" data-action=\"hide\" title=\"Hide prompt\">\r\n             <img src=\"../assets/icons/visible32.png\" alt=\"Visibility\" class=\"action-icon\" />\r\n           </button>\r\n           <button class=\"action-btn\" data-action=\"clone\" title=\"Clone prompt\">\r\n             <img src=\"../assets/icons/clone32.png\" alt=\"Clone\" class=\"action-icon\" />\r\n           </button>\r\n           ${prompt.source === 'starter' ? '' : '<button class=\"action-btn danger\" data-action=\"delete\" title=\"Delete prompt\"><img src=\"../assets/icons/delete32.png\" alt=\"Delete\" class=\"action-icon\" /></button>'}`\r\n        }\r\n      </div>\r\n    </div>\r\n    <div class=\"prompt-content\">${escapeHtml(prompt.body.substring(0, 150))}${prompt.body.length > 150 ? '...' : ''}</div>\r\n  `;\r\n  \r\n  // Add click handler\r\n  div.addEventListener('click', () => selectPrompt(prompt.id));\r\n  \r\n  // Add action button handlers\r\n  div.querySelectorAll('.action-btn').forEach(btn => {\r\n    btn.addEventListener('click', (e) => {\r\n      e.stopPropagation();\r\n      const action = (btn as HTMLElement).dataset.action;\r\n      handlePromptAction(action!, prompt.id);\r\n    });\r\n  });\r\n  \r\n  return div;\r\n}\r\n\r\n// Handle prompt actions\r\nasync function handlePromptAction(action: string, promptId: string) {\r\n  try {\r\n    switch (action) {\r\n      case 'fav':\r\n        await toggleFavorite(promptId);\r\n        break;\r\n      case 'hide':\r\n        await toggleHidden(promptId);\r\n        break;\r\n      case 'clone':\r\n        await clonePrompt(promptId);\r\n        break;\r\n      case 'delete':\r\n        // Prevent deletion of starter prompts\r\n        const prompt = await getPrompt(promptId);\r\n        if (prompt?.source === 'starter') {\r\n          showToast('Starter prompts cannot be deleted. Use hide instead.', 'error');\r\n          return;\r\n        }\r\n        await deletePrompt(promptId);\r\n        break;\r\n      case 'restore':\r\n        await restorePrompt(promptId);\r\n        break;\r\n      case 'permanentDelete':\r\n        if (confirm('This will permanently delete this prompt. This action cannot be undone. Continue?')) {\r\n          await permanentlyDeletePrompt(promptId);\r\n        }\r\n        break;\r\n      case 'incrementUsage':\r\n        await incrementPromptUsage(promptId);\r\n        break;\r\n    }\r\n    await refresh();\r\n    await loadHiddenPrompts();\r\n    await loadBinPrompts();\r\n  } catch (error) {\r\n    console.error('Action failed:', error);\r\n    showToast('Action failed', 'error');\r\n  }\r\n}\r\n\r\n// Select a prompt\r\nasync function selectPrompt(id: string) {\r\n  currentPromptId = id;\r\n  const prompt = await getPrompt(id);\r\n  if (!prompt) return;\r\n  \r\n  detailTitle.value = prompt.title;\r\n  detailBody.value = prompt.body;\r\n  \r\n  // Show save button only for non-starter prompts\r\n  saveButton.classList.toggle('visible', prompt.source !== 'starter');\r\n  \r\n  // Make title and textarea editable only for non-starter prompts\r\n  detailTitle.readOnly = prompt.source === 'starter';\r\n  detailBody.readOnly = prompt.source === 'starter';\r\n  \r\n  // Store last used\r\n  await putMeta(\"lastUsedPromptId\", id);\r\n  \r\n  // Update list selection\r\n  document.querySelectorAll('.prompt-item').forEach(item => {\r\n    item.classList.remove('active');\r\n  });\r\n  // Find the clicked prompt item and mark it as active\r\n  const clickedItem = document.querySelector(`[data-prompt-id=\"${id}\"]`);\r\n  if (clickedItem) {\r\n    clickedItem.classList.add('active');\r\n  }\r\n}\r\n\r\n// Insert current prompt\r\nasync function insertCurrentPrompt() {\r\n  if (!currentPromptId) return;\r\n  \r\n  try {\r\n    await chrome.runtime.sendMessage({ type: \"insert\", text: detailBody.value });\r\n    // Track analytics\r\n    await incrementPromptUsage(currentPromptId);\r\n    showToast('Prompt inserted');\r\n  } catch (error) {\r\n    console.error('Insert failed:', error);\r\n    showToast('Insert failed', 'error');\r\n  }\r\n}\r\n\r\n// Copy current prompt\r\nasync function copyCurrentPrompt() {\r\n  try {\r\n    await navigator.clipboard.writeText(detailBody.value);\r\n    // Track analytics if we have a current prompt\r\n    if (currentPromptId) {\r\n      await incrementPromptUsage(currentPromptId);\r\n    }\r\n    showToast('Copied to clipboard');\r\n  } catch (error) {\r\n    console.error('Copy failed:', error);\r\n    showToast('Copy failed', 'error');\r\n  }\r\n}\r\n\r\n// Save current prompt\r\nasync function saveCurrentPrompt() {\r\n  if (!currentPromptId) return;\r\n  \r\n  const prompt = await getPrompt(currentPromptId);\r\n  if (!prompt) return;\r\n  \r\n  // Don't allow saving starter prompts\r\n  if (prompt.source === 'starter') {\r\n    showToast('Starter prompts cannot be edited', 'error');\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    prompt.title = detailTitle.value.trim();\r\n    prompt.body = detailBody.value;\r\n    prompt.updatedAt = new Date().toISOString();\r\n    \r\n    // Validate title is not empty\r\n    if (!prompt.title) {\r\n      showToast('Title cannot be empty', 'error');\r\n      return;\r\n    }\r\n    \r\n    await putPrompt(prompt);\r\n    await refresh();\r\n    showToast('Prompt saved successfully', 'success');\r\n  } catch (error) {\r\n    console.error('Failed to save:', error);\r\n    showToast('Failed to save prompt', 'error');\r\n  }\r\n}\r\n\r\n// Toggle current prompt favorite\r\nasync function toggleCurrentFavorite() {\r\n  if (!currentPromptId) return;\r\n  await toggleFavorite(currentPromptId);\r\n  await refresh();\r\n  await loadHiddenPrompts();\r\n  await loadBinPrompts();\r\n  showToast('Favorite updated');\r\n}\r\n\r\n// Toggle current prompt hidden\r\nasync function toggleCurrentHidden() {\r\n  if (!currentPromptId) return;\r\n  await toggleHidden(currentPromptId);\r\n  await refresh();\r\n  await loadHiddenPrompts();\r\n  await loadBinPrompts();\r\n  showToast('Visibility updated');\r\n}\r\n\r\n// Clone current prompt\r\nasync function cloneCurrentPrompt() {\r\n  if (!currentPromptId) return;\r\n  await clonePrompt(currentPromptId);\r\n  await refresh();\r\n  showToast('Prompt cloned');\r\n}\r\n\r\n// Delete current prompt\r\nasync function deleteCurrentPrompt() {\r\n  if (!currentPromptId) return;\r\n  \r\n  // Check if this is a starter prompt\r\n  const prompt = await getPrompt(currentPromptId);\r\n  if (prompt?.source === 'starter') {\r\n    showToast('Starter prompts cannot be deleted. Use hide instead.', 'error');\r\n    return;\r\n  }\r\n  \r\n  if (!confirm('Move this prompt to the recycle bin?')) return;\r\n  \r\n  await deletePrompt(currentPromptId);\r\n  await refresh();\r\n  await loadHiddenPrompts();\r\n  await loadBinPrompts();\r\n  showToast('Prompt moved to bin');\r\n}\r\n\r\n// Restore current prompt\r\nasync function restoreCurrentPrompt() {\r\n  if (!currentPromptId) return;\r\n  await restorePrompt(currentPromptId);\r\n  await refresh();\r\n  await loadHiddenPrompts();\r\n  await loadBinPrompts();\r\n  showToast('Prompt restored');\r\n}\r\n\r\n// Clone a prompt\r\nasync function clonePrompt(id: string) {\r\n  const prompt = await getPrompt(id);\r\n  if (!prompt) return;\r\n  \r\n  const clone: Prompt = {\r\n    ...prompt,\r\n    id: crypto.randomUUID(),\r\n    source: \"user\",\r\n    originId: prompt.source === \"starter\" ? prompt.id : prompt.originId,\r\n    title: prompt.title + \" (copy)\",\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    version: 1\r\n  };\r\n  \r\n  await putPrompt(clone);\r\n}\r\n\r\n// Load hidden prompts\r\nasync function loadHiddenPrompts() {\r\n  try {\r\n    console.log('loadHiddenPrompts: Starting...');\r\n    // Get all prompts including hidden ones\r\n    const allPrompts = await listPrompts(true);\r\n    console.log('loadHiddenPrompts: All prompts loaded:', allPrompts.length);\r\n    \r\n    const hiddenPrompts = allPrompts.filter(p => p.hidden && !p.deletedAt);\r\n    console.log('loadHiddenPrompts: Hidden prompts found:', hiddenPrompts.length, hiddenPrompts);\r\n    \r\n    hiddenPromptsList.innerHTML = '';\r\n    \r\n    if (hiddenPrompts.length === 0) {\r\n      hiddenPromptsList.innerHTML = `\r\n        <div class=\"empty-state\">\r\n          <div class=\"empty-state-message\">No hidden prompts</div>\r\n        </div>\r\n      `;\r\n      return;\r\n    }\r\n    \r\n    hiddenPrompts.forEach(prompt => {\r\n      const promptElement = createPromptElement(prompt);\r\n      hiddenPromptsList.appendChild(promptElement);\r\n    });\r\n    \r\n    console.log('loadHiddenPrompts: Hidden prompts loaded successfully');\r\n  } catch (error) {\r\n    console.error('Failed to load hidden prompts:', error);\r\n  }\r\n}\r\n\r\n// Load bin prompts\r\nasync function loadBinPrompts() {\r\n  try {\r\n    console.log('loadBinPrompts: Starting...');\r\n    // Get all prompts including deleted ones\r\n    const allPrompts = await listPrompts(true);\r\n    console.log('loadBinPrompts: All prompts loaded:', allPrompts.length);\r\n    \r\n    const binPrompts = allPrompts.filter(p => p.deletedAt);\r\n    console.log('loadBinPrompts: Deleted prompts found:', binPrompts.length, binPrompts);\r\n    \r\n    binPromptsList.innerHTML = '';\r\n    \r\n    if (binPrompts.length === 0) {\r\n      binPromptsList.innerHTML = `\r\n        <div class=\"empty-state\">\r\n          <div class=\"empty-state-message\">No prompts in bin</div>\r\n        </div>\r\n      `;\r\n      return;\r\n    }\r\n    \r\n    binPrompts.forEach(prompt => {\r\n      const promptElement = createPromptElement(prompt);\r\n      binPromptsList.appendChild(promptElement);\r\n    });\r\n    \r\n    console.log('loadBinPrompts: Deleted prompts loaded successfully');\r\n  } catch (error) {\r\n    console.error('Failed to load bin prompts:', error);\r\n  }\r\n}\r\n\r\n// Refresh the prompt list\r\nasync function refresh() {\r\n  try {\r\n    prompts = await listPrompts(true);\r\n    \r\n    if (prompts.length === 0) {\r\n      // Try to manually trigger starter loading\r\n      try {\r\n        await chrome.runtime.sendMessage({ type: \"starter:ensure\" });\r\n        // Wait a bit and try again\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n      } catch (starterError) {\r\n        console.error('Starter ensure failed:', starterError);\r\n      }\r\n    }\r\n    \r\n    performSearch();\r\n    \r\n    // Also refresh hidden and deleted prompts to ensure consistency\r\n    await loadHiddenPrompts();\r\n    await loadBinPrompts();\r\n  } catch (error) {\r\n    console.error('Failed to refresh:', error);\r\n    showToast('Failed to refresh', 'error');\r\n  }\r\n}\r\n\r\n// Show toast notification\r\nfunction showToast(message: string, type: 'success' | 'error' | 'info' = 'info') {\r\n  const toast = document.createElement('div');\r\n  toast.className = `toast toast-${type}`;\r\n  toast.innerHTML = `\r\n    <div class=\"toast-header\">\r\n      <span class=\"toast-title\">${type.charAt(0).toUpperCase() + type.slice(1)}</span>\r\n      <button class=\"toast-close\">\u00D7</button>\r\n    </div>\r\n    <div class=\"toast-message\">${message}</div>\r\n  `;\r\n  \r\n  // Add click handler for close button\r\n  const closeBtn = toast.querySelector('.toast-close') as HTMLButtonElement;\r\n  closeBtn.addEventListener('click', () => {\r\n    if (toast.parentNode) {\r\n      toast.remove();\r\n    }\r\n  });\r\n  \r\n  toastContainer.appendChild(toast);\r\n  \r\n  // Auto-remove after 3 seconds\r\n  setTimeout(() => {\r\n    if (toast.parentNode) {\r\n      toast.remove();\r\n    }\r\n  }, 3000);\r\n}\r\n\r\n// Open options page\r\nfunction openOptions() {\r\n  chrome.runtime.openOptionsPage();\r\n}\r\n\r\n// Utility functions\r\nfunction escapeHtml(text: string): string {\r\n  const div = document.createElement('div');\r\n  div.textContent = text;\r\n  return div.innerHTML;\r\n}\r\n\r\n// Initialize when DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', init);\r\n"],
  "mappings": ";AAEA,IAAM,UAAU;AAChB,IAAM,aAAa;AACnB,IAAM,QAAQ;AACd,IAAM,OAAO;AAOb,eAAsB,SAA+B;AACnD,SAAO,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC5C,UAAM,MAAM,UAAU,KAAK,SAAS,UAAU;AAE9C,QAAI,kBAAkB,CAAC,UAAU;AAC/B,cAAQ,IAAI,6CAA6C;AACzD,YAAM,KAAK,IAAI;AAGf,UAAI,CAAC,GAAG,iBAAiB,SAAS,KAAK,GAAG;AACxC,gBAAQ,IAAI,2BAA2B;AACvC,cAAM,IAAI,GAAG,kBAAkB,OAAO,EAAE,SAAS,KAAK,CAAC;AAGvD,gBAAQ,IAAI,8BAA8B;AAC1C,YAAI;AACF,YAAE,YAAY,gBAAgB,aAAa,EAAE,QAAQ,MAAM,CAAC;AAC5D,YAAE,YAAY,aAAa,UAAU,EAAE,QAAQ,MAAM,CAAC;AACtD,YAAE,YAAY,eAAe,YAAY,EAAE,QAAQ,MAAM,CAAC;AAC1D,YAAE,YAAY,aAAa,UAAU,EAAE,QAAQ,MAAM,CAAC;AACtD,kBAAQ,IAAI,kCAAkC;AAAA,QAChD,SAAS,YAAY;AACnB,kBAAQ,MAAM,2BAA2B,UAAU;AAAA,QAErD;AAAA,MACF;AAGA,UAAI,CAAC,GAAG,iBAAiB,SAAS,IAAI,GAAG;AACvC,gBAAQ,IAAI,wBAAwB;AACpC,WAAG,kBAAkB,MAAM,EAAE,SAAS,MAAM,CAAC;AAAA,MAC/C;AAAA,IACF;AAEA,QAAI,YAAY,MAAM;AACpB,cAAQ,IAAI,8BAA8B;AAC1C,cAAQ,IAAI,MAAM;AAAA,IACpB;AAEA,QAAI,UAAU,MAAM;AAClB,cAAQ,MAAM,wBAAwB,IAAI,KAAK;AAC/C,aAAO,IAAI,KAAK;AAAA,IAClB;AAAA,EACF,CAAC;AACH;AAEA,eAAsB,UAAU,GAAW;AACzC,QAAM,KAAK,MAAM,OAAO;AACxB,QAAM,GAAG,IAAI,OAAO,aAAa,WAAS,MAAM,IAAI,CAAC,CAAC;AACxD;AAGA,eAAe,aAAa,IAAyC;AACnE,MAAI;AACF,YAAQ,IAAI,yCAAyC,EAAE;AACvD,UAAM,KAAK,MAAM,OAAO;AACxB,UAAM,SAAS,MAAM,GAAuB,IAAI,OAAO,YAAY,WAAS,WAA+B,MAAM,IAAI,EAAE,CAAC,CAAC;AACzH,YAAQ,IAAI,yBAAyB,MAAM;AAC3C,WAAO;AAAA,EACT,SAAS,OAAO;AACd,YAAQ,MAAM,wBAAwB,KAAK;AAC3C,UAAM;AAAA,EACR;AACF;AAEA,eAAe,eAAe,iBAAiB,OAA0B;AACvE,MAAI;AACF,YAAQ,IAAI,kDAAkD,cAAc;AAC5E,UAAM,KAAK,MAAM,OAAO;AACxB,YAAQ,IAAI,8CAA8C;AAE1D,UAAM,SAAS,MAAM,GAAa,IAAI,OAAO,YAAY,WAAS,IAAI,QAAkB,CAAC,SAAS,WAAW;AAC3G,YAAM,MAAgB,CAAC;AACvB,YAAM,MAAM,MAAM,WAAW;AAC7B,UAAI,YAAY,MAAM;AACpB,cAAM,MAAM,IAAI;AAChB,YAAI,CAAC,KAAK;AACR,kBAAQ,IAAI,0DAA0D,IAAI,MAAM;AAChF,iBAAO,QAAQ,GAAG;AAAA,QACpB;AACA,cAAM,MAAM,IAAI;AAChB,YAAI,CAAC,IAAI,aAAa;AAAgB,cAAI,KAAK,GAAG;AAClD,YAAI,SAAS;AAAA,MACf;AACA,UAAI,UAAU,MAAM,OAAO,IAAI,KAAK;AAAA,IACtC,CAAC,CAAC;AAEF,YAAQ,IAAI,iCAAiC,OAAO,QAAQ,MAAM;AAGlE,UAAM,EAAE,eAAe,IAAI,MAAM,aAAa;AAG9C,UAAM,eAAe,OAAO,KAAK,CAAC,GAAG,MAAM;AAEzC,YAAM,SAAS,eAAe,KAAK,CAAC,MAAkE,EAAE,aAAa,EAAE,EAAE,GAAG,cAAc;AAC1I,YAAM,SAAS,eAAe,KAAK,CAAC,MAAkE,EAAE,aAAa,EAAE,EAAE,GAAG,cAAc;AAG1I,UAAI,WAAW,QAAQ;AACrB,eAAO,SAAS;AAAA,MAClB;AAGA,aAAO,EAAE,MAAM,cAAc,EAAE,KAAK;AAAA,IACtC,CAAC;AAED,WAAO;AAAA,EACT,SAAS,OAAO;AACd,YAAQ,MAAM,0BAA0B,KAAK;AAC7C,UAAM;AAAA,EACR;AACF;AAGA,eAAsB,UAAU,IAAoC;AAClE,MAAI;AACF,UAAM,SAAS,MAAM,aAAa,EAAE;AACpC,QAAI,UAAW,OAAO,WAAmB,QAAQ;AAE/C,cAAQ,IAAI,yBAAyB,EAAE,2BAA2B;AAClE,MAAC,OAAe,SAAS;AACzB,YAAM,UAAU,MAAM;AAAA,IACxB;AACA,WAAO,UAAU;AAAA,EACnB,SAAS,OAAO;AACd,YAAQ,MAAM,yBAAyB,KAAK;AAC5C,WAAO;AAAA,EACT;AACF;AAGA,eAAsB,YAAY,iBAAiB,OAA0B;AAC3E,MAAI;AACF,YAAQ,IAAI,+CAA+C,cAAc;AACzE,UAAMA,WAAU,MAAM,eAAe,cAAc;AACnD,YAAQ,IAAI,qCAAqCA,SAAQ,QAAQA,QAAO;AAGxE,QAAI,iBAAiB;AACrB,UAAM,kBAAkBA,SAAQ,IAAI,YAAU;AAC5C,UAAK,OAAO,WAAmB,QAAQ;AACrC,yBAAiB;AACjB,eAAO,EAAE,GAAG,QAAQ,QAAQ,UAAmB;AAAA,MACjD;AACA,aAAO;AAAA,IACT,CAAC;AAED,YAAQ,IAAI,kCAAkC,cAAc;AAC5D,YAAQ,IAAI,kCAAkC,gBAAgB,QAAQ,eAAe;AAGrF,QAAI,gBAAgB;AAClB,cAAQ,IAAI,kBAAkB,gBAAgB,OAAO,OAAM,EAAE,WAAmB,MAAM,EAAE,MAAM,UAAU;AACxG,YAAM,QAAQ,IAAI,gBAAgB,IAAI,OAAK,UAAU,CAAC,CAAC,CAAC;AAGxD,YAAM,QAAQ,sBAAsB,IAAI;AACxC,YAAM,QAAQ,uBAAsB,oBAAI,KAAK,GAAE,YAAY,CAAC;AAC5D,YAAM,QAAQ,oBAAoB,OAAO;AAEzC,cAAQ,IAAI,iDAAiD;AAAA,IAC/D;AAGA,UAAM,EAAE,eAAe,IAAI,MAAM,aAAa;AAG9C,UAAM,gBAAgB,gBAAgB,KAAK,CAAC,GAAG,MAAM;AAEnD,YAAM,SAAS,eAAe,KAAK,CAAC,MAAkE,EAAE,aAAa,EAAE,EAAE,GAAG,cAAc;AAC1I,YAAM,SAAS,eAAe,KAAK,CAAC,MAAkE,EAAE,aAAa,EAAE,EAAE,GAAG,cAAc;AAG1I,UAAI,WAAW,QAAQ;AACrB,eAAO,SAAS;AAAA,MAClB;AAGA,aAAO,EAAE,MAAM,cAAc,EAAE,KAAK;AAAA,IACtC,CAAC;AAED,WAAO;AAAA,EACT,SAAS,OAAO;AACd,YAAQ,MAAM,2BAA2B,KAAK;AAC9C,WAAO,CAAC;AAAA,EACV;AACF;AAEA,eAAsB,QAAQ,KAAa,OAAY;AACrD,QAAM,KAAK,MAAM,OAAO;AACxB,QAAM,GAAG,IAAI,MAAM,aAAa,WAAS,MAAM,IAAI,EAAE,KAAK,MAAM,CAAC,CAAC;AACpE;AAEA,eAAsB,QAAW,KAAqC;AACpE,QAAM,KAAK,MAAM,OAAO;AACxB,SAAO,MAAM,GAAG,IAAI,MAAM,YAAY,WAAS;AAC7C,UAAM,MAAM,MAAM,IAAI,GAAG;AACzB,WAAO,WAAkD,GAAG,EAAE,KAAK,OAAK,GAAG,KAAK;AAAA,EAClF,CAAC;AACH;AAEA,eAAsB,aAAa,IAAY;AAC7C,QAAM,KAAK,MAAM,OAAO;AACxB,QAAM,SAAS,MAAM,UAAU,EAAE;AACjC,MAAI,QAAQ;AACV,WAAO,aAAY,oBAAI,KAAK,GAAE,YAAY;AAC1C,WAAO,aAAY,oBAAI,KAAK,GAAE,YAAY;AAE1C,WAAO,WAAW;AAClB,UAAM,UAAU,MAAM;AAAA,EACxB;AACF;AAEA,eAAsB,cAAc,IAAY;AAC9C,QAAM,KAAK,MAAM,OAAO;AACxB,QAAM,SAAS,MAAM,UAAU,EAAE;AACjC,MAAI,UAAU,OAAO,WAAW;AAC9B,WAAO,YAAY;AACnB,WAAO,aAAY,oBAAI,KAAK,GAAE,YAAY;AAC1C,UAAM,UAAU,MAAM;AAAA,EACxB;AACF;AAEA,eAAsB,eAAe,IAAY;AAC/C,QAAM,KAAK,MAAM,OAAO;AACxB,QAAM,SAAS,MAAM,UAAU,EAAE;AACjC,MAAI,QAAQ;AACV,WAAO,WAAW,CAAC,OAAO;AAC1B,WAAO,aAAY,oBAAI,KAAK,GAAE,YAAY;AAC1C,UAAM,UAAU,MAAM;AAAA,EACxB;AACF;AAEA,eAAsB,aAAa,IAAY;AAC7C,QAAM,KAAK,MAAM,OAAO;AACxB,QAAM,SAAS,MAAM,UAAU,EAAE;AACjC,MAAI,QAAQ;AACV,WAAO,SAAS,CAAC,OAAO;AACxB,WAAO,aAAY,oBAAI,KAAK,GAAE,YAAY;AAE1C,QAAI,OAAO,QAAQ;AACjB,aAAO,WAAW;AAAA,IACpB;AACA,UAAM,UAAU,MAAM;AAAA,EACxB;AACF;AAEA,eAAsB,wBAAwB,IAAY;AACxD,QAAM,KAAK,MAAM,OAAO;AACxB,SAAO,MAAM,GAAG,IAAI,OAAO,aAAa,WAAS;AAC/C,WAAO,WAAW,MAAM,OAAO,EAAE,CAAC;AAAA,EACpC,CAAC;AACH;AA2BA,eAAsB,qBAAqB,UAAkB;AAC3D,MAAI;AAEF,UAAM,YAAY,MAAM,QAAgB,kBAAkB,KAAK;AAC/D,UAAM,UAAU,MAAM,QAA2E,gBAAgB,KAAK,CAAC;AAGvH,UAAM,QAAQ,oBAAoB,YAAY,CAAC;AAG/C,UAAM,OAAM,oBAAI,KAAK,GAAE,YAAY;AACnC,UAAM,gBAAgB,QAAQ,UAAU,OAAK,EAAE,aAAa,QAAQ;AAEpE,QAAI,iBAAiB,GAAG;AAEtB,cAAQ,aAAa,EAAE,cAAc;AACrC,cAAQ,aAAa,EAAE,WAAW;AAAA,IACpC,OAAO;AAEL,cAAQ,KAAK,EAAE,UAAU,YAAY,GAAG,UAAU,IAAI,CAAC;AAAA,IACzD;AAGA,YAAQ,KAAK,CAAC,GAAG,MAAM,EAAE,aAAa,EAAE,UAAU;AAClD,UAAM,OAAO,QAAQ,MAAM,GAAG,CAAC;AAG/B,UAAM,QAAQ,kBAAkB,IAAI;AAEpC,WAAO,EAAE,WAAW,YAAY,GAAG,SAAS,KAAK;AAAA,EACnD,SAAS,OAAO;AACd,YAAQ,MAAM,qCAAqC,KAAK;AACxD,UAAM;AAAA,EACR;AACF;AAEA,eAAsB,eAAe;AACnC,MAAI;AACF,UAAM,YAAY,MAAM,QAAgB,kBAAkB,KAAK;AAC/D,UAAM,UAAU,MAAM,QAA2E,gBAAgB,KAAK,CAAC;AAEvH,WAAO;AAAA,MACL,kBAAkB;AAAA,MAClB,gBAAgB;AAAA,IAClB;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,4BAA4B,KAAK;AAC/C,WAAO;AAAA,MACL,kBAAkB;AAAA,MAClB,gBAAgB,CAAC;AAAA,IACnB;AAAA,EACF;AACF;AAEA,SAAS,GAAM,IAAiB,MAAc,MAA0B,IAAgD;AACtH,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAM,IAAI,GAAG,YAAY,MAAM,IAAI;AACnC,UAAM,QAAQ,EAAE,YAAY,IAAI;AAChC,QAAI;AACJ,QAAI;AAAE,eAAS,GAAG,KAAK;AAAA,IAAG,SAAS,GAAG;AAAE,aAAO,CAAC;AAAG;AAAA,IAAQ;AAC3D,MAAE,aAAa,MAAM,QAAQ,MAAM;AACnC,MAAE,UAAU,MAAM,OAAO,EAAE,KAAK;AAChC,MAAE,UAAU,MAAM,OAAO,EAAE,KAAK;AAAA,EAClC,CAAC;AACH;AAEA,SAAS,WAAc,KAA6B;AAClD,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,QAAI,YAAY,MAAM,QAAQ,IAAI,MAAW;AAC7C,QAAI,UAAU,MAAM,OAAO,IAAI,KAAK;AAAA,EACtC,CAAC;AACH;;;AC3VA,IAAM,cAAc,SAAS,eAAe,QAAQ;AACpD,IAAM,iBAAiB,SAAS,eAAe,cAAc;AAC7D,IAAM,cAAc,SAAS,eAAe,cAAc;AAC1D,IAAM,eAAe,SAAS,eAAe,eAAe;AAC5D,IAAM,gBAAgB,SAAS,eAAe,gBAAgB;AAC9D,IAAM,oBAAoB,SAAS,eAAe,qBAAqB;AACvE,IAAM,YAAY,SAAS,eAAe,YAAY;AACtD,IAAM,aAAa,SAAS,eAAe,aAAa;AACxD,IAAM,iBAAiB,SAAS,eAAe,kBAAkB;AACjE,IAAM,gBAAgB,SAAS,eAAe,gBAAgB;AAC9D,IAAM,cAAc,SAAS,eAAe,cAAc;AAC1D,IAAM,aAAa,SAAS,eAAe,aAAa;AACxD,IAAM,eAAe,SAAS,eAAe,YAAY;AACzD,IAAM,aAAa,SAAS,eAAe,UAAU;AACrD,IAAM,aAAa,SAAS,eAAe,UAAU;AACrD,IAAM,gBAAgB,SAAS,eAAe,aAAa;AAC3D,IAAM,iBAAiB,SAAS,eAAe,iBAAiB;AAGhE,IAAI,kBAAiC;AACrC,IAAI,UAAoB,CAAC;AACzB,IAAI,eAA8B;AAClC,IAAI,cAAc;AAAA,EAChB,YAAY;AAAA,EACZ,YAAY;AACd;AAGA,eAAe,OAAO;AACpB,MAAI;AAEF,UAAM,QAAQ;AAGd,UAAM,kBAAkB;AACxB,UAAM,eAAe;AAGrB,eAAW;AAGX,sBAAkB;AAGlB,UAAM,qBAAqB;AAG3B,gBAAY,YAAY;AACtB,UAAI;AACF,cAAM,kBAAkB;AACxB,cAAM,eAAe;AAAA,MACvB,SAAS,OAAO;AACd,gBAAQ,MAAM,4BAA4B,KAAK;AAAA,MACjD;AAAA,IACF,GAAG,GAAI;AAEP,YAAQ,IAAI,oCAAoC;AAAA,EAClD,SAAS,OAAO;AACd,YAAQ,MAAM,mCAAmC,KAAK;AACtD,cAAU,kCAAkC,OAAO;AAAA,EACrD;AACF;AAGA,eAAe,uBAAuB;AACpC,MAAI;AACF,UAAM,UAAU,MAAM,QAAiB,eAAe;AACtD,QAAI,CAAC,SAAS;AACZ,YAAM,OAAO,QAAQ,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAAA,IAC7D;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,6BAA6B,KAAK;AAAA,EAClD;AACF;AAGA,SAAS,oBAAoB;AAC3B,MAAI;AACF,mBAAe,IAAI,OAAO,OAAO,QAAQ,OAAO,iBAAiB,CAAC;AAClE,iBAAa,YAAY,CAAC,MAAM;AAC9B,YAAM,UAAU,EAAE;AAClB,UAAI,QAAQ,OAAO;AACjB,gBAAQ,MAAM,wBAAwB,QAAQ,KAAK;AACnD;AAAA,MACF;AACA,qBAAe,OAAO;AAAA,IACxB;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,KAAK,2DAA2D;AAAA,EAC1E;AACF;AAGA,SAAS,aAAa;AAEpB,cAAY,iBAAiB,SAAS,aAAa;AACnD,iBAAe,iBAAiB,SAAS,WAAW;AAGpD,eAAa,iBAAiB,SAAS,MAAM,cAAc,cAAc,aAAa,CAAC;AACvF,YAAU,iBAAiB,SAAS,MAAM,cAAc,WAAW,UAAU,CAAC;AAG9E,eAAa,iBAAiB,SAAS,mBAAmB;AAC1D,aAAW,iBAAiB,SAAS,iBAAiB;AACtD,aAAW,iBAAiB,SAAS,iBAAiB;AACtD,gBAAc,iBAAiB,SAAS,WAAW;AAGnD,SAAO,QAAQ,UAAU,YAAY,CAAC,SAAS,QAAQ,iBAAiB;AACtE,QAAI,QAAQ,SAAS,mBAAmB;AACtC,cAAQ,IAAI,yDAAyD;AACrE,cAAQ;AACR,wBAAkB;AAClB,qBAAe;AAAA,IACjB;AAAA,EACF,CAAC;AAGD,WAAS,iBAAiB,WAAW,CAAC,MAAM;AAC1C,QAAI,EAAE,QAAQ;AACZ,cAAQ,EAAE,IAAI,YAAY,GAAG;AAAA,QAC3B,KAAK;AACH,YAAE,eAAe;AACjB,cAAI,iBAAiB;AACnB,gCAAoB;AAAA,UACtB;AACA;AAAA,QACF,KAAK;AACH,YAAE,eAAe;AACjB,cAAI,WAAW,OAAO;AACpB,8BAAkB;AAAA,UACpB;AACA;AAAA,MACJ;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAGA,SAAS,cAAc,QAAqB,SAAsB;AAChE,QAAM,aAAa,OAAO,UAAU,SAAS,UAAU;AACvD,MAAI,YAAY;AACd,WAAO,UAAU,OAAO,UAAU;AAClC,YAAQ,UAAU,OAAO,UAAU;AAAA,EACrC,OAAO;AACL,WAAO,UAAU,IAAI,UAAU;AAC/B,YAAQ,UAAU,IAAI,UAAU;AAEhC,QAAI,WAAW,cAAc;AAC3B,wBAAkB;AAAA,IACpB,WAAW,WAAW,WAAW;AAC/B,qBAAe;AAAA,IACjB;AAAA,EACF;AACF;AAGA,SAAS,cAAc;AACrB,cAAY,QAAQ;AACpB,iBAAe,UAAU,OAAO,SAAS;AACzC,gBAAc;AAChB;AAGA,eAAe,gBAAgB;AAC7B,QAAM,QAAQ,YAAY,MAAM,KAAK;AAGrC,MAAI,OAAO;AACT,mBAAe,UAAU,IAAI,SAAS;AAAA,EACxC,OAAO;AACL,mBAAe,UAAU,OAAO,SAAS;AAAA,EAC3C;AAEA,MAAI,cAAc;AAEhB,iBAAa,YAAY;AAAA,MACvB;AAAA,MACA,OAAO;AAAA,QACL,GAAG;AAAA,QACH,YAAY,YAAY;AAAA,QACxB,YAAY,YAAY;AAAA,QACxB,QAAQ;AAAA,QACR,WAAW;AAAA,MACb;AAAA,IACF,CAAC;AAAA,EACH,OAAO;AAEL,UAAM,UAAU,mBAAmB,KAAK;AACxC,mBAAe,OAAO;AAAA,EACxB;AACF;AAGA,SAAS,sBAAsBC,UAAuB;AACpD,SAAO,CAAC,GAAGA,QAAO,EAAE,KAAK,CAAC,GAAG,MAAM;AAEjC,QAAI,EAAE,YAAY,CAAC,EAAE;AAAU,aAAO;AACtC,QAAI,CAAC,EAAE,YAAY,EAAE;AAAU,aAAO;AAItC,WAAO;AAAA,EACT,CAAC;AACH;AAGA,SAAS,mBAAmB,OAAsB;AAChD,MAAI,CAAC,OAAO;AAEV,UAAMC,YAAW,QAAQ,OAAO,OAAK,CAAC,EAAE,UAAU,CAAC,EAAE,SAAS;AAE9D,WAAO,sBAAsBA,SAAQ;AAAA,EACvC;AAEA,QAAM,QAAQ,MAAM,YAAY,EAAE,MAAM,KAAK;AAC7C,QAAM,WAAW,QAAQ,OAAO,OAAK;AACnC,QAAI,CAAC,YAAY,cAAc,EAAE;AAAQ,aAAO;AAChD,QAAI,CAAC,YAAY,cAAc,EAAE;AAAW,aAAO;AAEnD,UAAM,iBAAiB,GAAG,EAAE,KAAK,IAAI,EAAE,KAAK,KAAK,GAAG,CAAC,IAAI,EAAE,IAAI,GAAG,YAAY;AAC9E,WAAO,MAAM,MAAM,UAAQ,eAAe,SAAS,IAAI,CAAC;AAAA,EAC1D,CAAC;AAGD,SAAO,sBAAsB,QAAQ;AACvC;AAGA,SAAS,eAAe,SAAgB;AACtC,cAAY,YAAY;AAExB,MAAI,QAAQ,WAAW,GAAG;AACxB,gBAAY,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOxB;AAAA,EACF;AAEA,UAAQ,QAAQ,YAAU;AACxB,UAAM,gBAAgB,oBAAoB,MAAM;AAChD,gBAAY,YAAY,aAAa;AAAA,EACvC,CAAC;AACH;AAGA,SAAS,oBAAoB,QAA6B;AACxD,QAAM,MAAM,SAAS,cAAc,KAAK;AACxC,MAAI,YAAY,eAAe,OAAO,OAAO,kBAAkB,WAAW,EAAE,IAAI,OAAO,WAAW,aAAa,EAAE,IAAI,OAAO,SAAS,WAAW,EAAE;AAElJ,MAAI,aAAa,kBAAkB,OAAO,EAAE;AAC5C,MAAI,YAAY;AAAA;AAAA,kCAEgB,WAAW,OAAO,KAAK,CAAC;AAAA;AAAA,UAEhD,OAAO;AAAA;AAAA,IAEP;AAAA;AAAA,MAEA,OAAO;AAAA;AAAA,IAEP;AAAA;AAAA;AAAA;AAAA;AAAA,IAIA,uDAAuD,OAAO,WAAW,0BAA0B,kBAAkB;AAAA,yCACtF,OAAO,WAAW,gBAAgB,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAQ3E,OAAO,WAAW,YAAY,KAAK,mKAAmK;AAAA,GAC3M;AAAA;AAAA;AAAA,kCAG0B,WAAW,OAAO,KAAK,UAAU,GAAG,GAAG,CAAC,CAAC,GAAG,OAAO,KAAK,SAAS,MAAM,QAAQ,EAAE;AAAA;AAIjH,MAAI,iBAAiB,SAAS,MAAM,aAAa,OAAO,EAAE,CAAC;AAG3D,MAAI,iBAAiB,aAAa,EAAE,QAAQ,SAAO;AACjD,QAAI,iBAAiB,SAAS,CAAC,MAAM;AACnC,QAAE,gBAAgB;AAClB,YAAM,SAAU,IAAoB,QAAQ;AAC5C,yBAAmB,QAAS,OAAO,EAAE;AAAA,IACvC,CAAC;AAAA,EACH,CAAC;AAED,SAAO;AACT;AAGA,eAAe,mBAAmB,QAAgB,UAAkB;AAClE,MAAI;AACF,YAAQ,QAAQ;AAAA,MACd,KAAK;AACH,cAAM,eAAe,QAAQ;AAC7B;AAAA,MACF,KAAK;AACH,cAAM,aAAa,QAAQ;AAC3B;AAAA,MACF,KAAK;AACH,cAAM,YAAY,QAAQ;AAC1B;AAAA,MACF,KAAK;AAEH,cAAM,SAAS,MAAM,UAAU,QAAQ;AACvC,YAAI,QAAQ,WAAW,WAAW;AAChC,oBAAU,wDAAwD,OAAO;AACzE;AAAA,QACF;AACA,cAAM,aAAa,QAAQ;AAC3B;AAAA,MACF,KAAK;AACH,cAAM,cAAc,QAAQ;AAC5B;AAAA,MACF,KAAK;AACH,YAAI,QAAQ,mFAAmF,GAAG;AAChG,gBAAM,wBAAwB,QAAQ;AAAA,QACxC;AACA;AAAA,MACF,KAAK;AACH,cAAM,qBAAqB,QAAQ;AACnC;AAAA,IACJ;AACA,UAAM,QAAQ;AACd,UAAM,kBAAkB;AACxB,UAAM,eAAe;AAAA,EACvB,SAAS,OAAO;AACd,YAAQ,MAAM,kBAAkB,KAAK;AACrC,cAAU,iBAAiB,OAAO;AAAA,EACpC;AACF;AAGA,eAAe,aAAa,IAAY;AACtC,oBAAkB;AAClB,QAAM,SAAS,MAAM,UAAU,EAAE;AACjC,MAAI,CAAC;AAAQ;AAEb,cAAY,QAAQ,OAAO;AAC3B,aAAW,QAAQ,OAAO;AAG1B,aAAW,UAAU,OAAO,WAAW,OAAO,WAAW,SAAS;AAGlE,cAAY,WAAW,OAAO,WAAW;AACzC,aAAW,WAAW,OAAO,WAAW;AAGxC,QAAM,QAAQ,oBAAoB,EAAE;AAGpC,WAAS,iBAAiB,cAAc,EAAE,QAAQ,UAAQ;AACxD,SAAK,UAAU,OAAO,QAAQ;AAAA,EAChC,CAAC;AAED,QAAM,cAAc,SAAS,cAAc,oBAAoB,EAAE,IAAI;AACrE,MAAI,aAAa;AACf,gBAAY,UAAU,IAAI,QAAQ;AAAA,EACpC;AACF;AAGA,eAAe,sBAAsB;AACnC,MAAI,CAAC;AAAiB;AAEtB,MAAI;AACF,UAAM,OAAO,QAAQ,YAAY,EAAE,MAAM,UAAU,MAAM,WAAW,MAAM,CAAC;AAE3E,UAAM,qBAAqB,eAAe;AAC1C,cAAU,iBAAiB;AAAA,EAC7B,SAAS,OAAO;AACd,YAAQ,MAAM,kBAAkB,KAAK;AACrC,cAAU,iBAAiB,OAAO;AAAA,EACpC;AACF;AAGA,eAAe,oBAAoB;AACjC,MAAI;AACF,UAAM,UAAU,UAAU,UAAU,WAAW,KAAK;AAEpD,QAAI,iBAAiB;AACnB,YAAM,qBAAqB,eAAe;AAAA,IAC5C;AACA,cAAU,qBAAqB;AAAA,EACjC,SAAS,OAAO;AACd,YAAQ,MAAM,gBAAgB,KAAK;AACnC,cAAU,eAAe,OAAO;AAAA,EAClC;AACF;AAGA,eAAe,oBAAoB;AACjC,MAAI,CAAC;AAAiB;AAEtB,QAAM,SAAS,MAAM,UAAU,eAAe;AAC9C,MAAI,CAAC;AAAQ;AAGb,MAAI,OAAO,WAAW,WAAW;AAC/B,cAAU,oCAAoC,OAAO;AACrD;AAAA,EACF;AAEA,MAAI;AACF,WAAO,QAAQ,YAAY,MAAM,KAAK;AACtC,WAAO,OAAO,WAAW;AACzB,WAAO,aAAY,oBAAI,KAAK,GAAE,YAAY;AAG1C,QAAI,CAAC,OAAO,OAAO;AACjB,gBAAU,yBAAyB,OAAO;AAC1C;AAAA,IACF;AAEA,UAAM,UAAU,MAAM;AACtB,UAAM,QAAQ;AACd,cAAU,6BAA6B,SAAS;AAAA,EAClD,SAAS,OAAO;AACd,YAAQ,MAAM,mBAAmB,KAAK;AACtC,cAAU,yBAAyB,OAAO;AAAA,EAC5C;AACF;AA6DA,eAAe,YAAY,IAAY;AACrC,QAAM,SAAS,MAAM,UAAU,EAAE;AACjC,MAAI,CAAC;AAAQ;AAEb,QAAM,QAAgB;AAAA,IACpB,GAAG;AAAA,IACH,IAAI,OAAO,WAAW;AAAA,IACtB,QAAQ;AAAA,IACR,UAAU,OAAO,WAAW,YAAY,OAAO,KAAK,OAAO;AAAA,IAC3D,OAAO,OAAO,QAAQ;AAAA,IACtB,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,IAClC,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,IAClC,SAAS;AAAA,EACX;AAEA,QAAM,UAAU,KAAK;AACvB;AAGA,eAAe,oBAAoB;AACjC,MAAI;AACF,YAAQ,IAAI,gCAAgC;AAE5C,UAAM,aAAa,MAAM,YAAY,IAAI;AACzC,YAAQ,IAAI,0CAA0C,WAAW,MAAM;AAEvE,UAAM,gBAAgB,WAAW,OAAO,OAAK,EAAE,UAAU,CAAC,EAAE,SAAS;AACrE,YAAQ,IAAI,4CAA4C,cAAc,QAAQ,aAAa;AAE3F,sBAAkB,YAAY;AAE9B,QAAI,cAAc,WAAW,GAAG;AAC9B,wBAAkB,YAAY;AAAA;AAAA;AAAA;AAAA;AAK9B;AAAA,IACF;AAEA,kBAAc,QAAQ,YAAU;AAC9B,YAAM,gBAAgB,oBAAoB,MAAM;AAChD,wBAAkB,YAAY,aAAa;AAAA,IAC7C,CAAC;AAED,YAAQ,IAAI,uDAAuD;AAAA,EACrE,SAAS,OAAO;AACd,YAAQ,MAAM,kCAAkC,KAAK;AAAA,EACvD;AACF;AAGA,eAAe,iBAAiB;AAC9B,MAAI;AACF,YAAQ,IAAI,6BAA6B;AAEzC,UAAM,aAAa,MAAM,YAAY,IAAI;AACzC,YAAQ,IAAI,uCAAuC,WAAW,MAAM;AAEpE,UAAM,aAAa,WAAW,OAAO,OAAK,EAAE,SAAS;AACrD,YAAQ,IAAI,0CAA0C,WAAW,QAAQ,UAAU;AAEnF,mBAAe,YAAY;AAE3B,QAAI,WAAW,WAAW,GAAG;AAC3B,qBAAe,YAAY;AAAA;AAAA;AAAA;AAAA;AAK3B;AAAA,IACF;AAEA,eAAW,QAAQ,YAAU;AAC3B,YAAM,gBAAgB,oBAAoB,MAAM;AAChD,qBAAe,YAAY,aAAa;AAAA,IAC1C,CAAC;AAED,YAAQ,IAAI,qDAAqD;AAAA,EACnE,SAAS,OAAO;AACd,YAAQ,MAAM,+BAA+B,KAAK;AAAA,EACpD;AACF;AAGA,eAAe,UAAU;AACvB,MAAI;AACF,cAAU,MAAM,YAAY,IAAI;AAEhC,QAAI,QAAQ,WAAW,GAAG;AAExB,UAAI;AACF,cAAM,OAAO,QAAQ,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAE3D,cAAM,IAAI,QAAQ,aAAW,WAAW,SAAS,GAAI,CAAC;AAAA,MACxD,SAAS,cAAc;AACrB,gBAAQ,MAAM,0BAA0B,YAAY;AAAA,MACtD;AAAA,IACF;AAEA,kBAAc;AAGd,UAAM,kBAAkB;AACxB,UAAM,eAAe;AAAA,EACvB,SAAS,OAAO;AACd,YAAQ,MAAM,sBAAsB,KAAK;AACzC,cAAU,qBAAqB,OAAO;AAAA,EACxC;AACF;AAGA,SAAS,UAAU,SAAiB,OAAqC,QAAQ;AAC/E,QAAM,QAAQ,SAAS,cAAc,KAAK;AAC1C,QAAM,YAAY,eAAe,IAAI;AACrC,QAAM,YAAY;AAAA;AAAA,kCAEc,KAAK,OAAO,CAAC,EAAE,YAAY,IAAI,KAAK,MAAM,CAAC,CAAC;AAAA;AAAA;AAAA,iCAG7C,OAAO;AAAA;AAItC,QAAM,WAAW,MAAM,cAAc,cAAc;AACnD,WAAS,iBAAiB,SAAS,MAAM;AACvC,QAAI,MAAM,YAAY;AACpB,YAAM,OAAO;AAAA,IACf;AAAA,EACF,CAAC;AAED,iBAAe,YAAY,KAAK;AAGhC,aAAW,MAAM;AACf,QAAI,MAAM,YAAY;AACpB,YAAM,OAAO;AAAA,IACf;AAAA,EACF,GAAG,GAAI;AACT;AAGA,SAAS,cAAc;AACrB,SAAO,QAAQ,gBAAgB;AACjC;AAGA,SAAS,WAAW,MAAsB;AACxC,QAAM,MAAM,SAAS,cAAc,KAAK;AACxC,MAAI,cAAc;AAClB,SAAO,IAAI;AACb;AAGA,SAAS,iBAAiB,oBAAoB,IAAI;",
  "names": ["prompts", "prompts", "filtered"]
}
