{
  "version": 3,
  "sources": ["../../src/lib/db.ts", "../../src/background/background.ts"],
  "sourcesContent": ["import type { LibraryState, Prompt } from \"./schema\";\r\n\r\nconst DB_NAME = \"prompt-library\";\r\nconst DB_VERSION = 1;\r\nconst STORE = \"prompts\";\r\nconst META = \"meta\";\r\n\r\nexport interface Meta {\r\n  key: string;\r\n  value: any;\r\n}\r\n\r\nexport async function openDb(): Promise<IDBDatabase> {\r\n  return await new Promise((resolve, reject) => {\r\n    const req = indexedDB.open(DB_NAME, DB_VERSION);\r\n    req.onupgradeneeded = () => {\r\n      const db = req.result;\r\n      if (!db.objectStoreNames.contains(STORE)) {\r\n        const s = db.createObjectStore(STORE, { keyPath: \"id\" });\r\n        s.createIndex(\"by_deletedAt\", \"deletedAt\", { unique: false });\r\n      }\r\n      if (!db.objectStoreNames.contains(META)) {\r\n        db.createObjectStore(META, { keyPath: \"key\" });\r\n      }\r\n    };\r\n    req.onsuccess = () => resolve(req.result);\r\n    req.onerror = () => reject(req.error);\r\n  });\r\n}\r\n\r\nexport async function putPrompt(p: Prompt) {\r\n  const db = await openDb();\r\n  await tx(db, STORE, \"readwrite\", store => store.put(p));\r\n}\r\n\r\nexport async function getPrompt(id: string): Promise<Prompt | undefined> {\r\n  const db = await openDb();\r\n  return await tx(db, STORE, \"readonly\", store => reqPromise<Prompt | undefined>(store.get(id)));\r\n}\r\n\r\nexport async function listPrompts(includeDeleted = false): Promise<Prompt[]> {\r\n  const db = await openDb();\r\n  return await tx(db, STORE, \"readonly\", store => new Promise((resolve, reject) => {\r\n    const out: Prompt[] = [];\r\n    const req = store.openCursor();\r\n    req.onsuccess = () => {\r\n      const cur = req.result;\r\n      if (!cur) return resolve(out);\r\n      const val = cur.value as Prompt;\r\n      if (!val.deletedAt || includeDeleted) out.push(val);\r\n      cur.continue();\r\n    };\r\n    req.onerror = () => reject(req.error);\r\n  }));\r\n}\r\n\r\nexport async function putMeta(key: string, value: any) {\r\n  const db = await openDb();\r\n  await tx(db, META, \"readwrite\", store => store.put({ key, value }));\r\n}\r\n\r\nexport async function getMeta<T>(key: string): Promise<T | undefined> {\r\n  const db = await openDb();\r\n  return await tx(db, META, \"readonly\", store => reqPromise<T | undefined>(store.get(key)).then(r => r?.value));\r\n}\r\n\r\nfunction tx<T>(db: IDBDatabase, name: string, mode: IDBTransactionMode, fn: (store: IDBObjectStore) => any): Promise<T> {\r\n  return new Promise((resolve, reject) => {\r\n    const t = db.transaction(name, mode);\r\n    const store = t.objectStore(name);\r\n    let result: any;\r\n    try { result = fn(store); } catch (e) { reject(e); return; }\r\n    t.oncomplete = () => resolve(result);\r\n    t.onerror = () => reject(t.error);\r\n    t.onabort = () => reject(t.error);\r\n  });\r\n}\r\n\r\nfunction reqPromise<T>(req: IDBRequest): Promise<T> {\r\n  return new Promise((resolve, reject) => {\r\n    req.onsuccess = () => resolve(req.result as T);\r\n    req.onerror = () => reject(req.error);\r\n  });\r\n}\r\n", "import { listPrompts, putPrompt, getMeta, putMeta, openDb } from \"../lib/db\";\r\nimport type { Prompt } from \"../lib/schema\";\r\n\r\n/**\r\n * One-time seed loader on first run.\r\n */\r\nchrome.runtime.onInstalled.addListener(async details => {\r\n  if (details.reason === \"install\") {\r\n    await ensureSeedLoaded();\r\n  }\r\n  chrome.contextMenus.create({ id: \"insert-last\", title: \"Insert last prompt\", contexts: [\"editable\"] });\r\n  chrome.alarms.create(\"purge\", { periodInMinutes: 60 * 24 });\r\n});\r\n\r\n/**\r\n * Toolbar click opens the side panel.\r\n */\r\nchrome.action.onClicked.addListener(async tab => {\r\n  if (!tab?.id) return;\r\n  try {\r\n    await chrome.sidePanel.open({ tabId: tab.id });\r\n  } catch {\r\n    // Side panel may not be available on very old Chrome versions.\r\n  }\r\n});\r\n\r\n/**\r\n * Context menu to insert the last used prompt.\r\n */\r\nchrome.contextMenus.onClicked.addListener(async (info, tab) => {\r\n  if (info.menuItemId !== \"insert-last\" || !tab?.id) return;\r\n  const lastId = await getMeta<string>(\"lastUsedPromptId\");\r\n  if (!lastId) return;\r\n  const all = await listPrompts();\r\n  const p = all.find(x => x.id === lastId);\r\n  if (!p) return;\r\n  await insertIntoTab(tab.id, p.body);\r\n});\r\n\r\n/**\r\n * Daily purge of recycle bin.\r\n */\r\nchrome.alarms.onAlarm.addListener(async a => {\r\n  if (a.name === \"purge\") await purgeRecycleBin();\r\n});\r\n\r\n/**\r\n * Message channel from side panel or options.\r\n */\r\nchrome.runtime.onMessage.addListener((msg, _sender, send) => {\r\n  (async () => {\r\n    if (msg.type === \"insert\") {\r\n      const [tab] = await chrome.tabs.query({ active: true, lastFocusedWindow: true });\r\n      if (tab?.id) await insertIntoTab(tab.id, msg.text as string);\r\n      send({ ok: true });\r\n    } else if (msg.type === \"seed:ensure\") {\r\n      await ensureSeedLoaded();\r\n      send({ ok: true });\r\n    }\r\n  })();\r\n  return true;\r\n});\r\n\r\n/**\r\n * Load seed prompts from packaged file on first run.\r\n * Seeds are read only and can be hidden or cloned.\r\n */\r\nasync function ensureSeedLoaded() {\r\n  try {\r\n    const seeded = await getMeta<boolean>(\"seedLoaded\");\r\n    if (seeded) return;\r\n\r\n    const url = chrome.runtime.getURL(\"data/seed.json\");\r\n    const res = await fetch(url);\r\n    if (!res.ok) throw new Error(\"Failed to load seed.json\");\r\n    const json = await res.json() as { schemaVersion: string; prompts: Prompt[] };\r\n\r\n    const db = await openDb();\r\n    const tx = db.transaction(\"prompts\", \"readwrite\");\r\n    const store = tx.objectStore(\"prompts\");\r\n\r\n    await new Promise<void>((resolve, reject) => {\r\n      const now = new Date().toISOString();\r\n      for (const p of json.prompts) {\r\n        const seed: Prompt = {\r\n          ...p,\r\n          source: \"seed\",\r\n          favorite: p.favorite ?? false,\r\n          hidden: p.hidden ?? false,\r\n          createdAt: p.createdAt ?? now,\r\n          updatedAt: p.updatedAt ?? now,\r\n          version: p.version ?? 1\r\n        };\r\n        store.put(seed);\r\n      }\r\n      tx.oncomplete = () => resolve();\r\n      tx.onerror = () => reject(tx.error);\r\n      tx.onabort = () => reject(tx.error);\r\n    });\r\n\r\n    await putMeta(\"seedLoaded\", true);\r\n  } catch (e) {\r\n    // Non-fatal, extension still works without seeds.\r\n    console.error(\"Seed load error:\", e);\r\n  }\r\n}\r\n\r\n/**\r\n * Remove items in recycle bin older than 30 days.\r\n */\r\nasync function purgeRecycleBin() {\r\n  const db = await openDb();\r\n  const t = db.transaction(\"prompts\", \"readwrite\");\r\n  const store = t.objectStore(\"prompts\");\r\n  const req = store.openCursor();\r\n  const now = Date.now();\r\n\r\n  req.onsuccess = () => {\r\n    const cur = req.result as IDBCursorWithValue | null;\r\n    if (!cur) return;\r\n    const p = cur.value as Prompt;\r\n    if (p.deletedAt) {\r\n      const age = now - new Date(p.deletedAt).getTime();\r\n      if (age > 30 * 24 * 60 * 60 * 1000) {\r\n        store.delete(p.id);\r\n      }\r\n    }\r\n    cur.continue();\r\n  };\r\n}\r\n\r\n/**\r\n * Try to insert text into the focused element in the tab.\r\n * Fallback to clipboard if blocked by page restrictions or CSP.\r\n */\r\nasync function insertIntoTab(tabId: number, text: string) {\r\n  try {\r\n    await chrome.scripting.executeScript({\r\n      target: { tabId },\r\n      func: (t: string) => {\r\n        const ok = tryInsert(document.activeElement as HTMLElement | null, t) || tryFrames(t);\r\n        if (!ok) {\r\n          // Clipboard fallback\r\n          void navigator.clipboard.writeText(t);\r\n        }\r\n\r\n        function tryInsert(node: HTMLElement | null, val: string): boolean {\r\n          if (!node) return false;\r\n          // Inputs and textareas\r\n          if ((node as HTMLInputElement).value !== undefined) {\r\n            const input = node as HTMLInputElement;\r\n            const start = input.selectionStart ?? input.value.length;\r\n            const end = input.selectionEnd ?? input.value.length;\r\n            input.setRangeText(val, start, end, \"end\");\r\n            input.dispatchEvent(new Event(\"input\", { bubbles: true }));\r\n            return true;\r\n          }\r\n          // Contenteditable\r\n          if (node.isContentEditable) {\r\n            const sel = window.getSelection();\r\n            if (!sel) return false;\r\n            sel.deleteFromDocument();\r\n            const textNode = document.createTextNode(val);\r\n            if (sel.rangeCount === 0) {\r\n              const r = document.createRange();\r\n              r.selectNodeContents(node);\r\n              sel.addRange(r);\r\n            }\r\n            const range = sel.getRangeAt(0);\r\n            range.insertNode(textNode);\r\n            range.setStartAfter(textNode);\r\n            range.setEndAfter(textNode);\r\n            sel.removeAllRanges();\r\n            sel.addRange(range);\r\n            return true;\r\n          }\r\n          return false;\r\n        }\r\n\r\n        function tryFrames(val: string): boolean {\r\n          for (const f of Array.from(window.frames)) {\r\n            try {\r\n              const d = f.document;\r\n              const el = d.activeElement as HTMLElement | null;\r\n              if (tryInsert(el, val)) return true;\r\n            } catch {\r\n              // Cross-origin frames will throw, ignore\r\n            }\r\n          }\r\n          return false;\r\n        }\r\n      },\r\n      args: [text]\r\n    });\r\n  } catch {\r\n    // Best effort clipboard fallback on any injection error\r\n    try {\r\n      await chrome.scripting.executeScript({\r\n        target: { tabId },\r\n        func: (t: string) => void navigator.clipboard.writeText(t),\r\n        args: [text]\r\n      });\r\n    } catch {\r\n      // Swallow\r\n    }\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["tx"]
}
