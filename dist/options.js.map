{
  "version": 3,
  "sources": ["../src/lib/db.ts", "../src/options/options.ts"],
  "sourcesContent": ["import type { LibraryState, Prompt } from \"./schema\";\r\n\r\nconst DB_NAME = \"prompt-library\";\r\nconst DB_VERSION = 1;\r\nconst STORE = \"prompts\";\r\nconst META = \"meta\";\r\n\r\nexport interface Meta {\r\n  key: string;\r\n  value: any;\r\n}\r\n\r\nexport async function openDb(): Promise<IDBDatabase> {\r\n  return await new Promise((resolve, reject) => {\r\n    const req = indexedDB.open(DB_NAME, DB_VERSION);\r\n    req.onupgradeneeded = () => {\r\n      const db = req.result;\r\n      if (!db.objectStoreNames.contains(STORE)) {\r\n        const s = db.createObjectStore(STORE, { keyPath: \"id\" });\r\n        s.createIndex(\"by_deletedAt\", \"deletedAt\", { unique: false });\r\n        s.createIndex(\"by_hidden\", \"hidden\", { unique: false });\r\n        s.createIndex(\"by_favorite\", \"favorite\", { unique: false });\r\n        s.createIndex(\"by_source\", \"source\", { unique: false });\r\n      }\r\n      if (!db.objectStoreNames.contains(META)) {\r\n        db.createObjectStore(META, { keyPath: \"key\" });\r\n      }\r\n    };\r\n    req.onsuccess = () => resolve(req.result);\r\n    req.onerror = () => reject(req.error);\r\n  });\r\n}\r\n\r\nexport async function putPrompt(p: Prompt) {\r\n  const db = await openDb();\r\n  await tx(db, STORE, \"readwrite\", store => store.put(p));\r\n}\r\n\r\nexport async function getPrompt(id: string): Promise<Prompt | undefined> {\r\n  const db = await openDb();\r\n  return await tx(db, STORE, \"readonly\", store => reqPromise<Prompt | undefined>(store.get(id)));\r\n}\r\n\r\nexport async function listPrompts(includeDeleted = false): Promise<Prompt[]> {\r\n  const db = await openDb();\r\n  return await tx(db, STORE, \"readonly\", store => new Promise((resolve, reject) => {\r\n    const out: Prompt[] = [];\r\n    const req = store.openCursor();\r\n    req.onsuccess = () => {\r\n      const cur = req.result as IDBCursorWithValue | null;\r\n      if (!cur) return resolve(out);\r\n      const val = cur.value as Prompt;\r\n      if (!val.deletedAt || includeDeleted) out.push(val);\r\n      cur.continue();\r\n    };\r\n    req.onerror = () => reject(req.error);\r\n  }));\r\n}\r\n\r\nexport async function putMeta(key: string, value: any) {\r\n  const db = await openDb();\r\n  await tx(db, META, \"readwrite\", store => store.put({ key, value }));\r\n}\r\n\r\nexport async function getMeta<T>(key: string): Promise<T | undefined> {\r\n  const db = await openDb();\r\n  return await tx(db, META, \"readonly\", store => reqPromise<T | undefined>(store.get(key)).then(r => r?.value));\r\n}\r\n\r\nexport async function deletePrompt(id: string) {\r\n  const db = await openDb();\r\n  const prompt = await getPrompt(id);\r\n  if (prompt) {\r\n    prompt.deletedAt = new Date().toISOString();\r\n    prompt.updatedAt = new Date().toISOString();\r\n    // Clear favorite flag when deleting\r\n    prompt.favorite = false;\r\n    await putPrompt(prompt);\r\n  }\r\n}\r\n\r\nexport async function restorePrompt(id: string) {\r\n  const db = await openDb();\r\n  const prompt = await getPrompt(id);\r\n  if (prompt && prompt.deletedAt) {\r\n    prompt.deletedAt = undefined;\r\n    prompt.updatedAt = new Date().toISOString();\r\n    await putPrompt(prompt);\r\n  }\r\n}\r\n\r\nexport async function toggleFavorite(id: string) {\r\n  const db = await openDb();\r\n  const prompt = await getPrompt(id);\r\n  if (prompt) {\r\n    prompt.favorite = !prompt.favorite;\r\n    prompt.updatedAt = new Date().toISOString();\r\n    await putPrompt(prompt);\r\n  }\r\n}\r\n\r\nexport async function toggleHidden(id: string) {\r\n  const db = await openDb();\r\n  const prompt = await getPrompt(id);\r\n  if (prompt) {\r\n    prompt.hidden = !prompt.hidden;\r\n    prompt.updatedAt = new Date().toISOString();\r\n    // Clear favorite flag when hiding (but not when unhiding)\r\n    if (prompt.hidden) {\r\n      prompt.favorite = false;\r\n    }\r\n    await putPrompt(prompt);\r\n  }\r\n}\r\n\r\nexport async function permanentlyDeletePrompt(id: string) {\r\n  const db = await openDb();\r\n  return await tx(db, STORE, \"readwrite\", store => {\r\n    return reqPromise(store.delete(id));\r\n  });\r\n}\r\n\r\nexport async function purgeDeletedPrompts(olderThanDays: number = 30) {\r\n  const db = await openDb();\r\n  const cutoff = new Date();\r\n  cutoff.setDate(cutoff.getDate() - olderThanDays);\r\n  \r\n  return await tx(db, STORE, \"readwrite\", store => new Promise((resolve, reject) => {\r\n    const req = store.openCursor();\r\n    const deletedIds: string[] = [];\r\n    \r\n    req.onsuccess = () => {\r\n      const cur = req.result as IDBCursorWithValue | null;\r\n      if (!cur) return resolve(deletedIds);\r\n      \r\n      const prompt = cur.value as Prompt;\r\n      if (prompt.deletedAt && new Date(prompt.deletedAt) < cutoff) {\r\n        deletedIds.push(prompt.id);\r\n        store.delete(prompt.id);\r\n      }\r\n      cur.continue();\r\n    };\r\n    req.onerror = () => reject(req.error);\r\n  }));\r\n}\r\n\r\nfunction tx<T>(db: IDBDatabase, name: string, mode: IDBTransactionMode, fn: (store: IDBObjectStore) => any): Promise<T> {\r\n  return new Promise((resolve, reject) => {\r\n    const t = db.transaction(name, mode);\r\n    const store = t.objectStore(name);\r\n    let result: any;\r\n    try { result = fn(store); } catch (e) { reject(e); return; }\r\n    t.oncomplete = () => resolve(result);\r\n    t.onerror = () => reject(t.error);\r\n    t.onabort = () => reject(t.error);\r\n  });\r\n}\r\n\r\nfunction reqPromise<T>(req: IDBRequest): Promise<T> {\r\n  return new Promise((resolve, reject) => {\r\n    req.onsuccess = () => resolve(req.result as T);\r\n    req.onerror = () => reject(req.error);\r\n  });\r\n}\r\n", "import { openDb, listPrompts, putPrompt, putMeta, getMeta } from '../lib/db.js';\r\nimport type { Prompt } from '../lib/schema.js';\r\n\r\n// DOM elements\r\nconst exportButton = document.getElementById('btn-export') as HTMLButtonElement;\r\nconst importButton = document.getElementById('btn-import') as HTMLButtonElement;\r\nconst importFile = document.getElementById('import-file') as HTMLInputElement;\r\nconst encryptionEnabled = document.getElementById('encryption-enabled') as HTMLInputElement;\r\nconst encryptionControls = document.getElementById('encryption-controls') as HTMLDivElement;\r\nconst encryptionPassphrase = document.getElementById('encryption-passphrase') as HTMLInputElement;\r\nconst confirmPassphrase = document.getElementById('confirm-passphrase') as HTMLInputElement;\r\nconst setPassphraseButton = document.getElementById('btn-set-passphrase') as HTMLButtonElement;\r\nconst telemetryEnabled = document.getElementById('telemetry-enabled') as HTMLInputElement;\r\nconst recyclePurgeDays = document.getElementById('recycle-purge-days') as HTMLSelectElement;\r\nconst reloadSeedsButton = document.getElementById('btn-reload-seeds') as HTMLButtonElement;\r\nconst resetSeedsButton = document.getElementById('btn-reset-seeds') as HTMLButtonElement;\r\nconst toastContainer = document.getElementById('toast-container') as HTMLDivElement;\r\n\r\n// Initialize\r\nasync function init() {\r\n  try {\r\n    await loadSettings();\r\n    wireEvents();\r\n  } catch (error) {\r\n    console.error('Failed to initialize options:', error);\r\n    showToast('Failed to initialize options', 'error');\r\n  }\r\n}\r\n\r\n// Load current settings\r\nasync function loadSettings() {\r\n  try {\r\n    // Encryption\r\n    const encryptionOn = await getMeta<boolean>('encryptionEnabled') ?? false;\r\n    encryptionEnabled.checked = encryptionOn;\r\n    if (encryptionOn) {\r\n      encryptionControls.classList.remove('hidden');\r\n    } else {\r\n      encryptionControls.classList.add('hidden');\r\n    }\r\n    \r\n    // Other settings\r\n    const telemetry = await getMeta<boolean>('telemetryEnabled') ?? false;\r\n    telemetryEnabled.checked = telemetry;\r\n    \r\n    const purgeDays = await getMeta<number>('recycleAutoPurgeDays') ?? 30;\r\n    recyclePurgeDays.value = purgeDays.toString();\r\n  } catch (error) {\r\n    console.error('Failed to load settings:', error);\r\n  }\r\n}\r\n\r\n// Wire up event listeners\r\nfunction wireEvents() {\r\n  // Import/Export\r\n  exportButton.addEventListener('click', exportPrompts);\r\n  importButton.addEventListener('click', () => importFile.click());\r\n  importFile.addEventListener('change', handleImport);\r\n  \r\n  // Encryption\r\n  encryptionEnabled.addEventListener('change', async () => {\r\n    const enabled = encryptionEnabled.checked;\r\n    if (enabled) {\r\n      encryptionControls.classList.remove('hidden');\r\n      showToast('Encryption enabled. Set a passphrase to secure your prompts.', 'info');\r\n    } else {\r\n      encryptionControls.classList.add('hidden');\r\n    }\r\n    await putMeta('encryptionEnabled', enabled);\r\n  });\r\n  \r\n  setPassphraseButton.addEventListener('click', setEncryptionPassphrase);\r\n  \r\n  // Other settings\r\n  telemetryEnabled.addEventListener('change', async () => {\r\n    await putMeta('telemetryEnabled', telemetryEnabled.checked);\r\n  });\r\n  \r\n  recyclePurgeDays.addEventListener('change', async () => {\r\n    await putMeta('recycleAutoPurgeDays', parseInt(recyclePurgeDays.value));\r\n  });\r\n  \r\n  // Seed management\r\n  reloadSeedsButton.addEventListener('click', reloadSeeds);\r\n  resetSeedsButton.addEventListener('click', resetSeeds);\r\n}\r\n\r\n// Export prompts to JSON file\r\nasync function exportPrompts() {\r\n  try {\r\n    const prompts = await listPrompts();\r\n    const exportData = {\r\n      schemaVersion: '1.0.0',\r\n      timestamp: new Date().toISOString(),\r\n      prompts: prompts.filter(p => p.source === 'user') // Only export user prompts\r\n    };\r\n    \r\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\r\n    const url = URL.createObjectURL(blob);\r\n    \r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `prompt-library-export-${new Date().toISOString().split('T')[0]}.json`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n    \r\n    showToast('Export completed successfully', 'success');\r\n  } catch (error) {\r\n    console.error('Export failed:', error);\r\n    showToast('Export failed', 'error');\r\n  }\r\n}\r\n\r\n// Handle import file selection\r\nasync function handleImport(event: Event) {\r\n  const target = event.target as HTMLInputElement;\r\n  const file = target.files?.[0];\r\n  if (!file) return;\r\n  \r\n  try {\r\n    const text = await file.text();\r\n    const importData = JSON.parse(text);\r\n    \r\n    if (!importData.prompts || !Array.isArray(importData.prompts)) {\r\n      throw new Error('Invalid import file format');\r\n    }\r\n    \r\n    // Perform merge\r\n    await mergePrompts(importData.prompts);\r\n    \r\n    showToast('Import completed successfully', 'success');\r\n  } catch (error) {\r\n    console.error('Import failed:', error);\r\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\r\n    showToast(`Import failed: ${errorMessage}`, 'error');\r\n  } finally {\r\n    // Reset file input\r\n    target.value = '';\r\n  }\r\n}\r\n\r\n// Merge prompts with conflict resolution\r\nasync function mergePrompts(importedPrompts: Prompt[]) {\r\n  const existingPrompts = await listPrompts();\r\n  const existingMap = new Map(existingPrompts.map(p => [p.id, p]));\r\n  \r\n  let added = 0;\r\n  let updated = 0;\r\n  let skipped = 0;\r\n  \r\n  for (const imported of importedPrompts) {\r\n    const existing = existingMap.get(imported.id);\r\n    \r\n    if (!existing) {\r\n      // New prompt\r\n      await putPrompt(imported);\r\n      added++;\r\n    } else if (existing.source === 'seed') {\r\n      // Never modify seed prompts\r\n      skipped++;\r\n    } else if (new Date(imported.updatedAt) > new Date(existing.updatedAt)) {\r\n      // Imported is newer\r\n      await putPrompt(imported);\r\n      updated++;\r\n    } else {\r\n      // Existing is newer or same\r\n      skipped++;\r\n    }\r\n  }\r\n  \r\n  showToast(`Merge completed: ${added} added, ${updated} updated, ${skipped} skipped`, 'info');\r\n}\r\n\r\n// Set encryption passphrase\r\nasync function setEncryptionPassphrase() {\r\n  const passphrase = encryptionPassphrase.value;\r\n  const confirm = confirmPassphrase.value;\r\n  \r\n  if (!passphrase || passphrase.length < 8) {\r\n    showToast('Passphrase must be at least 8 characters long', 'error');\r\n    return;\r\n  }\r\n  \r\n  if (passphrase !== confirm) {\r\n    showToast('Passphrases do not match', 'error');\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    // Generate salt and derive key\r\n    const salt = crypto.getRandomValues(new Uint8Array(32));\r\n    const saltB64 = btoa(String.fromCharCode(...salt));\r\n    \r\n    // Store salt (key derivation will happen when needed)\r\n    await putMeta('saltB64', saltB64);\r\n    \r\n    showToast('Encryption passphrase set successfully', 'success');\r\n    \r\n    // Clear inputs\r\n    encryptionPassphrase.value = '';\r\n    confirmPassphrase.value = '';\r\n  } catch (error) {\r\n    console.error('Failed to set passphrase:', error);\r\n    showToast('Failed to set passphrase', 'error');\r\n  }\r\n}\r\n\r\n// Reload seed prompts\r\nasync function reloadSeeds() {\r\n  try {\r\n    reloadSeedsButton.disabled = true;\r\n    reloadSeedsButton.textContent = 'Reloading...';\r\n    \r\n    await chrome.runtime.sendMessage({ type: \"seed:reload\" });\r\n    \r\n    showToast('Seed prompts reloaded successfully', 'success');\r\n  } catch (error) {\r\n    console.error('Failed to reload seeds:', error);\r\n    showToast('Failed to reload seed prompts', 'error');\r\n  } finally {\r\n    reloadSeedsButton.disabled = false;\r\n    reloadSeedsButton.textContent = 'Reload Seed Prompts';\r\n  }\r\n}\r\n\r\n// Reset all seed prompts\r\nasync function resetSeeds() {\r\n  if (!confirm('This will remove all existing seed prompts and reload them fresh. This action cannot be undone. Continue?')) {\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    resetSeedsButton.disabled = true;\r\n    resetSeedsButton.textContent = 'Resetting...';\r\n    \r\n    // Clear all seed prompts from database\r\n    const db = await openDb();\r\n    const tx = db.transaction(\"prompts\", \"readwrite\");\r\n    const store = tx.objectStore(\"prompts\");\r\n    \r\n    // Get all seed prompts\r\n    const seedPrompts = await listPrompts();\r\n    const seedIds = seedPrompts.filter(p => p.source === 'seed').map(p => p.id);\r\n    \r\n    // Delete them\r\n    for (const id of seedIds) {\r\n      await store.delete(id);\r\n    }\r\n    \r\n    // Clear seed metadata\r\n    await putMeta(\"seedLoaded\", false);\r\n    await putMeta(\"seedSchemaVersion\", \"\");\r\n    \r\n    // Reload seeds\r\n    await chrome.runtime.sendMessage({ type: \"seed:ensure\" });\r\n    \r\n    showToast('Seed prompts reset successfully', 'success');\r\n  } catch (error) {\r\n    console.error('Failed to reset seeds:', error);\r\n    showToast('Failed to reset seed prompts', 'error');\r\n  } finally {\r\n    resetSeedsButton.disabled = false;\r\n    resetSeedsButton.textContent = 'Reset All Seeds';\r\n  }\r\n}\r\n\r\n// Show toast notification\r\nfunction showToast(message: string, type: 'success' | 'error' | 'info' = 'info') {\r\n  const toast = document.createElement('div');\r\n  toast.className = `toast toast-${type}`;\r\n  toast.innerHTML = `\r\n    <div class=\"toast-header\">\r\n      <span class=\"toast-title\">${type.charAt(0).toUpperCase() + type.slice(1)}</span>\r\n      <button class=\"toast-close\" onclick=\"this.parentElement.parentElement.remove()\">\u00D7</button>\r\n    </div>\r\n    <div class=\"toast-message\">${message}</div>\r\n  `;\r\n  \r\n  toastContainer.appendChild(toast);\r\n  \r\n  // Auto-remove after 5 seconds\r\n  setTimeout(() => {\r\n    if (toast.parentNode) {\r\n      toast.remove();\r\n    }\r\n  }, 5000);\r\n}\r\n\r\n// Initialize when DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', init);\r\n\r\n"],
  "mappings": "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",
  "names": ["confirm", "tx"]
}
