{
  "version": 3,
  "sources": ["../src/lib/db.ts", "../src/options/options.ts"],
  "sourcesContent": ["import type { LibraryState, Prompt } from \"./schema\";\r\n\r\nconst DB_NAME = \"prompt-library\";\r\nconst DB_VERSION = 2; // Bumped to force schema upgrade\r\nconst STORE = \"prompts\";\r\nconst META = \"meta\";\r\n\r\nexport interface Meta {\r\n  key: string;\r\n  value: any;\r\n}\r\n\r\nexport async function openDb(): Promise<IDBDatabase> {\r\n  return await new Promise((resolve, reject) => {\r\n    const req = indexedDB.open(DB_NAME, DB_VERSION);\r\n    \r\n    req.onupgradeneeded = (event) => {\r\n      console.log('Database upgrade needed, creating schema...');\r\n      const db = req.result;\r\n      \r\n      // Create prompts store if it doesn't exist\r\n      if (!db.objectStoreNames.contains(STORE)) {\r\n        console.log('Creating prompts store...');\r\n        const s = db.createObjectStore(STORE, { keyPath: \"id\" });\r\n        \r\n        // Create indexes\r\n        console.log('Creating database indexes...');\r\n        try {\r\n          s.createIndex(\"by_deletedAt\", \"deletedAt\", { unique: false });\r\n          s.createIndex(\"by_hidden\", \"hidden\", { unique: false });\r\n          s.createIndex(\"by_favorite\", \"favorite\", { unique: false });\r\n          s.createIndex(\"by_source\", \"source\", { unique: false });\r\n          console.log('All indexes created successfully');\r\n        } catch (indexError) {\r\n          console.error('Error creating indexes:', indexError);\r\n          // Continue anyway - indexes are optional\r\n        }\r\n      }\r\n      \r\n      // Create meta store if it doesn't exist\r\n      if (!db.objectStoreNames.contains(META)) {\r\n        console.log('Creating meta store...');\r\n        db.createObjectStore(META, { keyPath: \"key\" });\r\n      }\r\n    };\r\n    \r\n    req.onsuccess = () => {\r\n      console.log('Database opened successfully');\r\n      resolve(req.result);\r\n    };\r\n    \r\n    req.onerror = () => {\r\n      console.error('Database open error:', req.error);\r\n      reject(req.error);\r\n    };\r\n  });\r\n}\r\n\r\nexport async function putPrompt(p: Prompt) {\r\n  const db = await openDb();\r\n  await tx(db, STORE, \"readwrite\", store => store.put(p));\r\n}\r\n\r\n// Raw database functions (without migration)\r\nasync function getPromptRaw(id: string): Promise<Prompt | undefined> {\r\n  try {\r\n    console.log('getPromptRaw: Getting prompt with ID:', id);\r\n    const db = await openDb();\r\n    const result = await tx<Prompt | undefined>(db, STORE, \"readonly\", store => reqPromise<Prompt | undefined>(store.get(id)));\r\n    console.log('getPromptRaw: Result:', result);\r\n    return result;\r\n  } catch (error) {\r\n    console.error('getPromptRaw: Error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function listPromptsRaw(includeDeleted = false): Promise<Prompt[]> {\r\n  try {\r\n    console.log('listPromptsRaw: Starting with includeDeleted =', includeDeleted);\r\n    const db = await openDb();\r\n    console.log('listPromptsRaw: Database opened successfully');\r\n    \r\n    const result = await tx<Prompt[]>(db, STORE, \"readonly\", store => new Promise<Prompt[]>((resolve, reject) => {\r\n      const out: Prompt[] = [];\r\n      const req = store.openCursor();\r\n      req.onsuccess = () => {\r\n        const cur = req.result as IDBCursorWithValue | null;\r\n        if (!cur) {\r\n          console.log('listPromptsRaw: Cursor completed, total prompts found:', out.length);\r\n          return resolve(out);\r\n        }\r\n        const val = cur.value as Prompt;\r\n        if (!val.deletedAt || includeDeleted) out.push(val);\r\n        cur.continue();\r\n      };\r\n      req.onerror = () => reject(req.error);\r\n    }));\r\n    \r\n    console.log('listPromptsRaw: Final result:', result.length, result);\r\n    \r\n    // Get usage analytics for sorting\r\n    const { topUsedPrompts } = await getAnalytics();\r\n    \r\n    // Sort prompts: first by usage count (descending), then alphabetically by title\r\n    const sortedResult = result.sort((a, b) => {\r\n      // Get usage count for each prompt\r\n      const aUsage = topUsedPrompts.find((p: { promptId: string; usageCount: number; lastUsed: string }) => p.promptId === a.id)?.usageCount || 0;\r\n      const bUsage = topUsedPrompts.find((p: { promptId: string; usageCount: number; lastUsed: string }) => p.promptId === b.id)?.usageCount || 0;\r\n      \r\n      // First sort by usage count (descending)\r\n      if (aUsage !== bUsage) {\r\n        return bUsage - aUsage;\r\n      }\r\n      \r\n      // Then sort alphabetically by title\r\n      return a.title.localeCompare(b.title);\r\n    });\r\n    \r\n    return sortedResult;\r\n  } catch (error) {\r\n    console.error('listPromptsRaw: Error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Enhanced getPrompt with auto-migration\r\nexport async function getPrompt(id: string): Promise<Prompt | null> {\r\n  try {\r\n    const prompt = await getPromptRaw(id);\r\n    if (prompt && (prompt.source as any) === 'seed') {\r\n      // Auto-migrate legacy data\r\n      console.log(`Auto-migrating prompt ${id} from 'seed' to 'starter'`);\r\n      (prompt as any).source = 'starter';\r\n      await putPrompt(prompt); // Save migrated version\r\n    }\r\n    return prompt || null;\r\n  } catch (error) {\r\n    console.error('Failed to get prompt:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// Enhanced listPrompts with auto-migration\r\nexport async function listPrompts(includeDeleted = false): Promise<Prompt[]> {\r\n  try {\r\n    console.log('listPrompts: Starting with includeDeleted =', includeDeleted);\r\n    const prompts = await listPromptsRaw(includeDeleted);\r\n    console.log('listPrompts: Raw prompts from DB:', prompts.length, prompts);\r\n    \r\n    // Check if any prompts need migration\r\n    let needsMigration = false;\r\n    const migratedPrompts = prompts.map(prompt => {\r\n      if ((prompt.source as any) === 'seed') {\r\n        needsMigration = true;\r\n        return { ...prompt, source: 'starter' as const };\r\n      }\r\n      return prompt;\r\n    });\r\n    \r\n    console.log('listPrompts: Migration needed?', needsMigration);\r\n    console.log('listPrompts: Migrated prompts:', migratedPrompts.length, migratedPrompts);\r\n    \r\n    // Save migrated prompts if needed\r\n    if (needsMigration) {\r\n      console.log(`Auto-migrating ${migratedPrompts.filter(p => (p.source as any) === 'seed').length} prompts`);\r\n      await Promise.all(migratedPrompts.map(p => putPrompt(p)));\r\n      \r\n      // Mark migration as completed\r\n      await putMeta('migrationCompleted', true);\r\n      await putMeta('migrationTimestamp', new Date().toISOString());\r\n      await putMeta('migrationVersion', '2.0.0');\r\n      \r\n      console.log('Auto-migration completed and marked as complete');\r\n    }\r\n    \r\n    // Get usage analytics for sorting\r\n    const { topUsedPrompts } = await getAnalytics();\r\n    \r\n    // Sort prompts: first by usage count (descending), then alphabetically by title\r\n    const sortedPrompts = migratedPrompts.sort((a, b) => {\r\n      // Get usage count for each prompt\r\n      const aUsage = topUsedPrompts.find((p: { promptId: string; usageCount: number; lastUsed: string }) => p.promptId === a.id)?.usageCount || 0;\r\n      const bUsage = topUsedPrompts.find((p: { promptId: string; usageCount: number; lastUsed: string }) => p.promptId === b.id)?.usageCount || 0;\r\n      \r\n      // First sort by usage count (descending)\r\n      if (aUsage !== bUsage) {\r\n        return bUsage - aUsage;\r\n      }\r\n      \r\n      // Then sort alphabetically by title\r\n      return a.title.localeCompare(b.title);\r\n    });\r\n    \r\n    return sortedPrompts;\r\n  } catch (error) {\r\n    console.error('Failed to list prompts:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function putMeta(key: string, value: any) {\r\n  const db = await openDb();\r\n  await tx(db, META, \"readwrite\", store => store.put({ key, value }));\r\n}\r\n\r\nexport async function getMeta<T>(key: string): Promise<T | undefined> {\r\n  const db = await openDb();\r\n  return await tx(db, META, \"readonly\", store => {\r\n    const req = store.get(key);\r\n    return reqPromise<{ key: string; value: T } | undefined>(req).then(r => r?.value);\r\n  });\r\n}\r\n\r\nexport async function deletePrompt(id: string) {\r\n  const db = await openDb();\r\n  const prompt = await getPrompt(id);\r\n  if (prompt) {\r\n    prompt.deletedAt = new Date().toISOString();\r\n    prompt.updatedAt = new Date().toISOString();\r\n    // Clear favorite flag when deleting\r\n    prompt.favorite = false;\r\n    await putPrompt(prompt);\r\n  }\r\n}\r\n\r\nexport async function restorePrompt(id: string) {\r\n  const db = await openDb();\r\n  const prompt = await getPrompt(id);\r\n  if (prompt && prompt.deletedAt) {\r\n    prompt.deletedAt = undefined;\r\n    prompt.updatedAt = new Date().toISOString();\r\n    await putPrompt(prompt);\r\n  }\r\n}\r\n\r\nexport async function toggleFavorite(id: string) {\r\n  const db = await openDb();\r\n  const prompt = await getPrompt(id);\r\n  if (prompt) {\r\n    prompt.favorite = !prompt.favorite;\r\n    prompt.updatedAt = new Date().toISOString();\r\n    await putPrompt(prompt);\r\n  }\r\n}\r\n\r\nexport async function toggleHidden(id: string) {\r\n  const db = await openDb();\r\n  const prompt = await getPrompt(id);\r\n  if (prompt) {\r\n    prompt.hidden = !prompt.hidden;\r\n    prompt.updatedAt = new Date().toISOString();\r\n    // Clear favorite flag when hiding (but not when unhiding)\r\n    if (prompt.hidden) {\r\n      prompt.favorite = false;\r\n    }\r\n    await putPrompt(prompt);\r\n  }\r\n}\r\n\r\nexport async function permanentlyDeletePrompt(id: string) {\r\n  const db = await openDb();\r\n  return await tx(db, STORE, \"readwrite\", store => {\r\n    return reqPromise(store.delete(id));\r\n  });\r\n}\r\n\r\nexport async function purgeDeletedPrompts(olderThanDays: number = 30) {\r\n  const db = await openDb();\r\n  const cutoff = new Date();\r\n  cutoff.setDate(cutoff.getDate() - olderThanDays);\r\n  \r\n  return await tx(db, STORE, \"readwrite\", store => new Promise((resolve, reject) => {\r\n    const req = store.openCursor();\r\n    const deletedIds: string[] = [];\r\n    \r\n    req.onsuccess = () => {\r\n      const cur = req.result as IDBCursorWithValue | null;\r\n      if (!cur) return resolve(deletedIds);\r\n      \r\n      const prompt = cur.value as Prompt;\r\n      if (prompt.deletedAt && new Date(prompt.deletedAt) < cutoff) {\r\n        deletedIds.push(prompt.id);\r\n        store.delete(prompt.id);\r\n      }\r\n      cur.continue();\r\n    };\r\n    req.onerror = () => reject(req.error);\r\n  }));\r\n}\r\n\r\n// Analytics functions\r\nexport async function incrementPromptUsage(promptId: string) {\r\n  try {\r\n    // Get current analytics data\r\n    const totalUsed = await getMeta<number>('totalPromptsUsed') ?? 0;\r\n    const topUsed = await getMeta<Array<{ promptId: string; usageCount: number; lastUsed: string }>>('topUsedPrompts') ?? [];\r\n    \r\n    // Increment total counter\r\n    await putMeta('totalPromptsUsed', totalUsed + 1);\r\n    \r\n    // Update individual prompt usage\r\n    const now = new Date().toISOString();\r\n    const existingIndex = topUsed.findIndex(p => p.promptId === promptId);\r\n    \r\n    if (existingIndex >= 0) {\r\n      // Update existing entry\r\n      topUsed[existingIndex].usageCount += 1;\r\n      topUsed[existingIndex].lastUsed = now;\r\n    } else {\r\n      // Add new entry\r\n      topUsed.push({ promptId, usageCount: 1, lastUsed: now });\r\n    }\r\n    \r\n    // Sort by usage count (highest first) and keep top 5\r\n    topUsed.sort((a, b) => b.usageCount - a.usageCount);\r\n    const top5 = topUsed.slice(0, 5);\r\n    \r\n    // Save updated top 5\r\n    await putMeta('topUsedPrompts', top5);\r\n    \r\n    return { totalUsed: totalUsed + 1, topUsed: top5 };\r\n  } catch (error) {\r\n    console.error('Failed to increment prompt usage:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getAnalytics() {\r\n  try {\r\n    const totalUsed = await getMeta<number>('totalPromptsUsed') ?? 0;\r\n    const topUsed = await getMeta<Array<{ promptId: string; usageCount: number; lastUsed: string }>>('topUsedPrompts') ?? [];\r\n    \r\n    return {\r\n      totalPromptsUsed: totalUsed,\r\n      topUsedPrompts: topUsed\r\n    };\r\n  } catch (error) {\r\n    console.error('Failed to get analytics:', error);\r\n    return {\r\n      totalPromptsUsed: 0,\r\n      topUsedPrompts: []\r\n    };\r\n  }\r\n}\r\n\r\nfunction tx<T>(db: IDBDatabase, name: string, mode: IDBTransactionMode, fn: (store: IDBObjectStore) => any): Promise<T> {\r\n  return new Promise((resolve, reject) => {\r\n    const t = db.transaction(name, mode);\r\n    const store = t.objectStore(name);\r\n    let result: any;\r\n    try { result = fn(store); } catch (e) { reject(e); return; }\r\n    t.oncomplete = () => resolve(result);\r\n    t.onerror = () => reject(t.error);\r\n    t.onabort = () => reject(t.error);\r\n  });\r\n}\r\n\r\nfunction reqPromise<T>(req: IDBRequest): Promise<T> {\r\n  return new Promise((resolve, reject) => {\r\n    req.onsuccess = () => resolve(req.result as T);\r\n    req.onerror = () => reject(req.error);\r\n  });\r\n}\r\n", "import { openDb, listPrompts, putPrompt, putMeta, getMeta, deletePrompt, getAnalytics, toggleFavorite, toggleHidden, restorePrompt } from '../lib/db.js';\r\nimport type { Prompt } from '../lib/schema.js';\r\n\r\n// DOM elements\r\nconst exportButton = document.getElementById('btn-export') as HTMLButtonElement;\r\nconst importButton = document.getElementById('btn-import') as HTMLButtonElement;\r\nconst importFile = document.getElementById('import-file') as HTMLInputElement;\r\nconst recyclePurgeDays = document.getElementById('recycle-purge-days') as HTMLSelectElement;\r\nconst toastContainer = document.getElementById('toast-container') as HTMLDivElement;\r\n\r\n// Analytics elements\r\nconst totalUsed = document.getElementById('total-used') as HTMLSpanElement;\r\nconst topPromptsList = document.getElementById('top-prompts-list') as HTMLDivElement;\r\n\r\n// New prompt editor elements\r\nconst newPromptButton = document.getElementById('btn-new-prompt') as HTMLButtonElement;\r\nconst savePromptButton = document.getElementById('btn-save-prompt') as HTMLButtonElement;\r\nconst deletePromptButton = document.getElementById('btn-delete-prompt') as HTMLButtonElement;\r\nconst promptSelect = document.getElementById('prompt-select') as HTMLSelectElement;\r\nconst promptSourceBadge = document.getElementById('prompt-source-badge') as HTMLSpanElement;\r\nconst promptTitle = document.getElementById('prompt-title') as HTMLInputElement;\r\nconst promptTags = document.getElementById('prompt-tags') as HTMLInputElement;\r\nconst tagsDisplay = document.getElementById('tags-display') as HTMLDivElement;\r\nconst promptBody = document.getElementById('prompt-body') as HTMLTextAreaElement;\r\nconst promptsSearch = document.getElementById('prompts-search') as HTMLInputElement;\r\nconst promptsFilterSource = document.getElementById('prompts-filter-source') as HTMLSelectElement;\r\nconst promptsCards = document.getElementById('prompts-cards') as HTMLDivElement;\r\n\r\n// Collapsible section elements\r\nconst hiddenToggle = document.getElementById('hidden-toggle') as HTMLDivElement;\r\nconst hiddenContent = document.getElementById('hidden-content') as HTMLDivElement;\r\nconst hiddenPromptsCards = document.getElementById('hidden-prompts-cards') as HTMLDivElement;\r\nconst deletedToggle = document.getElementById('deleted-toggle') as HTMLDivElement;\r\nconst deletedContent = document.getElementById('deleted-content') as HTMLDivElement;\r\nconst deletedPromptsCards = document.getElementById('deleted-prompts-cards') as HTMLDivElement;\r\n\r\n// State\r\nlet currentPrompt: Prompt | null = null;\r\nlet allPrompts: Prompt[] = [];\r\nlet currentTags: string[] = [];\r\nlet isEditing = false;\r\n\r\n// Initialize\r\nasync function init() {\r\n  try {\r\n    await loadSettings();\r\n    await refreshPrompts();\r\n    wireEvents();\r\n    setupTagInput();\r\n  } catch (error) {\r\n    console.error('Failed to initialize options:', error);\r\n    showToast('Failed to initialize options', 'error');\r\n  }\r\n}\r\n\r\n// Load current settings\r\nasync function loadSettings() {\r\n  try {\r\n    // Other settings\r\n    const purgeDays = await getMeta<number>('recycleAutoPurgeDays') ?? 30;\r\n    recyclePurgeDays.value = purgeDays.toString();\r\n  } catch (error) {\r\n    console.error('Failed to load settings:', error);\r\n  }\r\n}\r\n\r\n// Load all prompts\r\nasync function loadPrompts() {\r\n  try {\r\n    console.log('Loading prompts...');\r\n    allPrompts = await listPrompts(true);\r\n    console.log('Prompts loaded:', allPrompts.length, allPrompts);\r\n    \r\n    // If no prompts exist, try to ensure starters are loaded first\r\n    if (allPrompts.length === 0) {\r\n      console.log('No prompts found, ensuring starters are loaded...');\r\n      try {\r\n        await chrome.runtime.sendMessage({ type: \"starter:ensure\" });\r\n        // Wait a bit and try again\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        allPrompts = await listPrompts(true);\r\n        console.log('Prompts after starter ensure:', allPrompts.length, allPrompts);\r\n      } catch (starterError) {\r\n        console.error('Starter ensure failed:', starterError);\r\n      }\r\n    }\r\n    \r\n    populatePromptSelect();\r\n    renderPromptCards();\r\n    \r\n    // Show debug info\r\n    if (allPrompts.length === 0) {\r\n      showToast('No prompts found. Try reloading starter prompts.', 'info');\r\n    } else {\r\n      showToast(`Loaded ${allPrompts.length} prompts`, 'info');\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to load prompts:', error);\r\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\r\n    showToast('Failed to load prompts: ' + errorMessage, 'error');\r\n    \r\n    // Fallback: create some sample prompts for testing\r\n    console.log('Creating fallback sample prompts...');\r\n    allPrompts = createSamplePrompts();\r\n    populatePromptSelect();\r\n    renderPromptCards();\r\n  }\r\n}\r\n\r\n// Refresh prompts and analytics\r\nasync function refreshPrompts() {\r\n  await loadPrompts();\r\n  await loadAnalytics();\r\n}\r\n\r\n// Load analytics data\r\nasync function loadAnalytics() {\r\n  try {\r\n    const analytics = await getAnalytics();\r\n    \r\n    // Update total used counter\r\n    if (totalUsed) {\r\n      totalUsed.textContent = analytics.totalPromptsUsed.toString();\r\n    }\r\n    \r\n    // Update top prompts list\r\n    if (topPromptsList) {\r\n      if (analytics.topUsedPrompts.length === 0) {\r\n        topPromptsList.innerHTML = '<div class=\"empty-analytics\">No prompts used yet</div>';\r\n      } else {\r\n        // Get prompt titles for the top used prompts\r\n        const topPromptsWithTitles = await Promise.all(\r\n          analytics.topUsedPrompts.map(async (usage) => {\r\n            const prompt = allPrompts.find(p => p.id === usage.promptId);\r\n            return {\r\n              ...usage,\r\n              title: prompt?.title || 'Unknown Prompt'\r\n            };\r\n          })\r\n        );\r\n        \r\n        // Render the top prompts list\r\n        topPromptsList.innerHTML = topPromptsWithTitles\r\n          .map((prompt, index) => `\r\n            <div class=\"prompt-usage-item\">\r\n              <span class=\"prompt-usage-title\">${index + 1}. ${escapeHtml(prompt.title)}</span>\r\n              <span class=\"prompt-usage-count\">${prompt.usageCount} uses</span>\r\n            </div>\r\n          `)\r\n          .join('');\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to load analytics:', error);\r\n    if (topPromptsList) {\r\n      topPromptsList.innerHTML = '<div class=\"empty-analytics\">Failed to load analytics</div>';\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n// Create sample prompts for testing\r\nfunction createSamplePrompts(): Prompt[] {\r\n  return [\r\n    {\r\n      id: 'sample-1',\r\n      title: 'Sample Writing Prompt',\r\n      body: 'This is a sample writing prompt to help you get started. You can edit this or create your own prompts.',\r\n      tags: ['writing', 'sample', 'creative'],\r\n      source: 'user',\r\n      favorite: false,\r\n      hidden: false,\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n      version: 1\r\n    },\r\n    {\r\n      id: 'sample-2',\r\n      title: 'Sample Code Review',\r\n      body: 'This is a sample code review prompt. Use this template to structure your code reviews effectively.',\r\n      tags: ['code', 'review', 'development'],\r\n      source: 'user',\r\n      favorite: true,\r\n      hidden: false,\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n      version: 1\r\n    }\r\n  ];\r\n}\r\n\r\n// Populate prompt selector dropdown\r\nfunction populatePromptSelect() {\r\n  promptSelect.innerHTML = '<option value=\"\">-- Select a prompt --</option>';\r\n  \r\n  // Group prompts by source\r\n  const starterPrompts = allPrompts.filter(p => p.source === 'starter');\r\n  const userPrompts = allPrompts.filter(p => p.source === 'user');\r\n  \r\n  if (starterPrompts.length > 0) {\r\n    const starterGroup = document.createElement('optgroup');\r\n    starterGroup.label = 'Starter Prompts';\r\n    starterPrompts.forEach(prompt => {\r\n      const option = document.createElement('option');\r\n      option.value = prompt.id;\r\n      option.textContent = prompt.title;\r\n      starterGroup.appendChild(option);\r\n    });\r\n    promptSelect.appendChild(starterGroup);\r\n  }\r\n  \r\n  if (userPrompts.length > 0) {\r\n    const userGroup = document.createElement('optgroup');\r\n    userGroup.label = 'User Prompts';\r\n    userPrompts.forEach(prompt => {\r\n      const option = document.createElement('option');\r\n      option.value = prompt.id;\r\n      option.textContent = prompt.title;\r\n      userGroup.appendChild(option);\r\n    });\r\n    promptSelect.appendChild(userGroup);\r\n  }\r\n}\r\n\r\n// Wire up event listeners\r\nfunction wireEvents() {\r\n  // Import/Export\r\n  exportButton.addEventListener('click', exportPrompts);\r\n  importButton.addEventListener('click', () => importFile.click());\r\n  importFile.addEventListener('change', handleImport);\r\n  \r\n  // Meta Prompt\r\n  const metaPromptButton = document.getElementById('btn-meta-prompt') as HTMLButtonElement;\r\n  \r\n  if (metaPromptButton) {\r\n    metaPromptButton.addEventListener('click', copyMetaPrompt);\r\n  }\r\n  \r\n  // Other settings\r\n  recyclePurgeDays.addEventListener('change', async () => {\r\n    await putMeta('recycleAutoPurgeDays', parseInt(recyclePurgeDays.value));\r\n  });\r\n  \r\n  // Prompt editor\r\n  newPromptButton.addEventListener('click', createNewPrompt);\r\n  savePromptButton.addEventListener('click', saveCurrentPrompt);\r\n  deletePromptButton.addEventListener('click', deleteCurrentPrompt);\r\n  promptSelect.addEventListener('change', onPromptSelectChange);\r\n  \r\n  // Search and filter\r\n  promptsSearch.addEventListener('input', filterPromptCards);\r\n  promptsFilterSource.addEventListener('change', filterPromptCards);\r\n  \r\n  // Collapsible sections\r\n  hiddenToggle.addEventListener('click', () => toggleSection(hiddenToggle, hiddenContent));\r\n  deletedToggle.addEventListener('click', () => toggleSection(deletedToggle, deletedContent));\r\n}\r\n\r\n// Setup tag input functionality\r\nfunction setupTagInput() {\r\n  promptTags.addEventListener('keydown', (e) => {\r\n    if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      addTag(promptTags.value.trim());\r\n      promptTags.value = '';\r\n    }\r\n  });\r\n}\r\n\r\n// Toggle section visibility\r\nfunction toggleSection(toggle: HTMLElement, content: HTMLElement) {\r\n  const isExpanded = toggle.classList.contains('expanded');\r\n  if (isExpanded) {\r\n    toggle.classList.remove('expanded');\r\n    content.classList.remove('expanded');\r\n  } else {\r\n    toggle.classList.add('expanded');\r\n    content.classList.add('expanded');\r\n  }\r\n}\r\n\r\n// Add a new tag\r\nfunction addTag(tagText: string) {\r\n  if (tagText && !currentTags.includes(tagText)) {\r\n    currentTags.push(tagText);\r\n    renderTags();\r\n  }\r\n}\r\n\r\n// Remove a tag\r\nfunction removeTag(tagText: string) {\r\n  currentTags = currentTags.filter(tag => tag !== tagText);\r\n  renderTags();\r\n}\r\n\r\n// Render tags display\r\nfunction renderTags() {\r\n  tagsDisplay.innerHTML = '';\r\n  currentTags.forEach(tag => {\r\n    const tagElement = document.createElement('span');\r\n    tagElement.className = 'tag-item';\r\n    tagElement.innerHTML = `\r\n      ${tag}\r\n      <button class=\"tag-remove\">\u00D7</button>\r\n    `;\r\n    \r\n    // Add event listener for the remove button\r\n    const removeBtn = tagElement.querySelector('.tag-remove') as HTMLButtonElement;\r\n    removeBtn.addEventListener('click', () => removeTag(tag));\r\n    \r\n    tagsDisplay.appendChild(tagElement);\r\n  });\r\n}\r\n\r\n// Create new prompt\r\nfunction createNewPrompt() {\r\n  currentPrompt = null;\r\n  isEditing = true;\r\n  clearEditor();\r\n  promptSelect.value = '';\r\n  promptSourceBadge.textContent = '';\r\n  promptSourceBadge.className = 'source-badge';\r\n  updateEditorButtons();\r\n  showToast('Creating new prompt', 'info');\r\n}\r\n\r\n// Clear editor\r\nfunction clearEditor() {\r\n  promptTitle.value = '';\r\n  promptBody.value = '';\r\n  currentTags = [];\r\n  renderTags();\r\n}\r\n\r\n// On prompt selection change\r\nasync function onPromptSelectChange() {\r\n  const promptId = promptSelect.value;\r\n  if (!promptId) {\r\n    currentPrompt = null;\r\n    clearEditor();\r\n    updateEditorButtons();\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    currentPrompt = allPrompts.find(p => p.id === promptId) || null;\r\n    if (currentPrompt) {\r\n      loadPromptIntoEditor(currentPrompt);\r\n      updateEditorButtons();\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to load prompt:', error);\r\n    showToast('Failed to load prompt', 'error');\r\n  }\r\n}\r\n\r\n// Load prompt into editor\r\nfunction loadPromptIntoEditor(prompt: Prompt) {\r\n  promptTitle.value = prompt.title;\r\n  promptBody.value = prompt.body;\r\n  currentTags = [...prompt.tags];\r\n  renderTags();\r\n  \r\n  // Update source badge\r\n  promptSourceBadge.textContent = prompt.source;\r\n  promptSourceBadge.className = `source-badge ${prompt.source}`;\r\n  \r\n  // Set editing mode\r\n  isEditing = prompt.source === 'user';\r\n  updateEditorButtons();\r\n}\r\n\r\n// Update editor buttons state\r\nfunction updateEditorButtons() {\r\n  if (currentPrompt) {\r\n    savePromptButton.disabled = currentPrompt.source === 'starter';\r\n    deletePromptButton.disabled = currentPrompt.source === 'starter';\r\n    promptTitle.readOnly = currentPrompt.source === 'starter';\r\n    promptBody.readOnly = currentPrompt.source === 'starter';\r\n  } else {\r\n    savePromptButton.disabled = false;\r\n    deletePromptButton.disabled = true;\r\n    promptTitle.readOnly = false;\r\n    promptBody.readOnly = false;\r\n  }\r\n}\r\n\r\n// Save current prompt\r\nasync function saveCurrentPrompt() {\r\n  try {\r\n    if (!promptTitle.value.trim()) {\r\n      showToast('Title is required', 'error');\r\n      return;\r\n    }\r\n    \r\n    if (!promptBody.value.trim()) {\r\n      showToast('Content is required', 'error');\r\n      return;\r\n    }\r\n    \r\n    let prompt: Prompt;\r\n    \r\n      if (currentPrompt) {\r\n    // Update existing prompt\r\n    if (currentPrompt.source === 'starter') {\r\n      showToast('Starter prompts cannot be edited', 'error');\r\n      return;\r\n    }\r\n    prompt = { ...currentPrompt };\r\n  } else {\r\n      // Create new prompt\r\n      prompt = {\r\n        id: crypto.randomUUID(),\r\n        title: promptTitle.value.trim(),\r\n        body: promptBody.value.trim(),\r\n        tags: currentTags,\r\n        source: 'user',\r\n        favorite: false,\r\n        hidden: false,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString(),\r\n        version: 1\r\n      };\r\n    }\r\n    \r\n    // Update fields\r\n    prompt.title = promptTitle.value.trim();\r\n    prompt.body = promptBody.value.trim();\r\n    prompt.tags = currentTags;\r\n    prompt.updatedAt = new Date().toISOString();\r\n    \r\n    await putPrompt(prompt);\r\n    await refreshPrompts();\r\n    \r\n    // Update selection if this was a new prompt\r\n    if (!currentPrompt) {\r\n      promptSelect.value = prompt.id;\r\n      currentPrompt = prompt;\r\n    }\r\n    \r\n    showToast('Prompt saved successfully', 'success');\r\n    updateEditorButtons();\r\n    \r\n    // Notify sidebar to refresh\r\n    chrome.runtime.sendMessage({ type: \"prompts:updated\" });\r\n  } catch (error) {\r\n    console.error('Failed to save prompt:', error);\r\n    showToast('Failed to save prompt', 'error');\r\n  }\r\n}\r\n\r\n// Delete current prompt\r\nasync function deleteCurrentPrompt() {\r\n  if (!currentPrompt) return;\r\n  \r\n  if (currentPrompt.source === 'starter') {\r\n    showToast('Starter prompts cannot be deleted', 'error');\r\n    return;\r\n  }\r\n  \r\n  if (!confirm(`Are you sure you want to delete \"${currentPrompt.title}\"?`)) {\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    await deletePrompt(currentPrompt.id);\r\n    await refreshPrompts();\r\n    clearEditor();\r\n    currentPrompt = null;\r\n    promptSelect.value = '';\r\n    promptSourceBadge.textContent = '';\r\n    promptSourceBadge.className = 'source-badge';\r\n    updateEditorButtons();\r\n    showToast('Prompt deleted successfully', 'success');\r\n    \r\n    // Notify sidebar to refresh\r\n    chrome.runtime.sendMessage({ type: \"prompts:updated\" });\r\n  } catch (error) {\r\n    console.error('Failed to delete prompt:', error);\r\n    showToast('Failed to delete prompt', 'error');\r\n  }\r\n}\r\n\r\n// Filter prompt cards\r\nfunction filterPromptCards() {\r\n  const searchTerm = promptsSearch.value.toLowerCase();\r\n  const sourceFilter = promptsFilterSource.value;\r\n  \r\n  const filteredPrompts = allPrompts.filter(prompt => {\r\n    const matchesSearch = !searchTerm || \r\n      prompt.title.toLowerCase().includes(searchTerm) ||\r\n      prompt.body.toLowerCase().includes(searchTerm) ||\r\n      prompt.tags.some(tag => tag.toLowerCase().includes(searchTerm));\r\n    \r\n    const matchesSource = !sourceFilter || prompt.source === sourceFilter;\r\n    \r\n    return matchesSearch && matchesSource;\r\n  });\r\n  \r\n  renderPromptCards(filteredPrompts);\r\n}\r\n\r\n// Render prompt cards\r\nfunction renderPromptCards(prompts: Prompt[] = allPrompts) {\r\n  console.log('Rendering prompt cards:', prompts.length, prompts);\r\n  console.log('promptsCards element:', promptsCards);\r\n  \r\n  if (!promptsCards) {\r\n    console.error('promptsCards element not found!');\r\n    return;\r\n  }\r\n  \r\n  // Separate prompts by status\r\n  const activePrompts = prompts.filter(p => !p.hidden && !p.deletedAt);\r\n  const hiddenPrompts = prompts.filter(p => p.hidden && !p.deletedAt);\r\n  const deletedPrompts = prompts.filter(p => p.deletedAt);\r\n  \r\n  // Sort active prompts by priority: favorites first, then by usage count and alphabetical\r\n  const sortedActivePrompts = sortPromptsByPriority(activePrompts);\r\n  \r\n  // Render active prompts\r\n  promptsCards.innerHTML = '';\r\n  if (sortedActivePrompts.length === 0) {\r\n    promptsCards.innerHTML = `\r\n      <div class=\"empty-state\">\r\n        <div class=\"empty-state-message\">No active prompts found</div>\r\n      </div>\r\n    `;\r\n  } else {\r\n    sortedActivePrompts.forEach((prompt, index) => {\r\n      console.log(`Creating active card ${index + 1}:`, prompt.title);\r\n      const card = createPromptCard(prompt);\r\n      promptsCards.appendChild(card);\r\n    });\r\n  }\r\n  \r\n  // Render hidden prompts\r\n  if (hiddenPromptsCards) {\r\n    hiddenPromptsCards.innerHTML = '';\r\n    if (hiddenPrompts.length === 0) {\r\n      hiddenPromptsCards.innerHTML = `\r\n        <div class=\"empty-state\">\r\n          <div class=\"empty-state-message\">No hidden prompts</div>\r\n        </div>\r\n      `;\r\n    } else {\r\n      const sortedHiddenPrompts = sortPromptsByPriority(hiddenPrompts);\r\n      sortedHiddenPrompts.forEach((prompt, index) => {\r\n        console.log(`Creating hidden card ${index + 1}:`, prompt.title);\r\n        const card = createPromptCard(prompt);\r\n        hiddenPromptsCards.appendChild(card);\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Render deleted prompts\r\n  if (deletedPromptsCards) {\r\n    deletedPromptsCards.innerHTML = '';\r\n    if (deletedPrompts.length === 0) {\r\n      deletedPromptsCards.innerHTML = `\r\n        <div class=\"empty-state\">\r\n          <div class=\"empty-state-message\">No deleted prompts</div>\r\n        </div>\r\n      `;\r\n    } else {\r\n      const sortedDeletedPrompts = sortPromptsByPriority(deletedPrompts);\r\n      sortedDeletedPrompts.forEach((prompt, index) => {\r\n        console.log(`Creating deleted card ${index + 1}:`, prompt.title);\r\n        const card = createPromptCard(prompt);\r\n        deletedPromptsCards.appendChild(card);\r\n      });\r\n    }\r\n  }\r\n  \r\n  console.log('Cards rendered - Active:', sortedActivePrompts.length, 'Hidden:', hiddenPrompts.length, 'Deleted:', deletedPrompts.length);\r\n}\r\n\r\n// Create prompt card element\r\nfunction createPromptCard(prompt: Prompt): HTMLElement {\r\n  const card = document.createElement('div');\r\n  card.className = `prompt-card ${prompt.id === currentPrompt?.id ? 'selected' : ''} ${prompt.favorite ? 'favorite' : ''}`;\r\n  card.setAttribute('data-prompt-id', prompt.id);\r\n  \r\n  card.innerHTML = `\r\n    <div class=\"prompt-card-header\">\r\n      <div class=\"prompt-card-title\">${escapeHtml(prompt.title)}</div>\r\n      <span class=\"prompt-card-source ${prompt.source}\">${prompt.source}</span>\r\n    </div>\r\n    <div class=\"prompt-card-content\">${escapeHtml(prompt.body.substring(0, 150))}${prompt.body.length > 150 ? '...' : ''}</div>\r\n    <div class=\"prompt-card-tags\">\r\n      ${prompt.tags.map(tag => `<span class=\"prompt-card-tag\">${escapeHtml(tag)}</span>`).join('')}\r\n    </div>\r\n    <div class=\"prompt-card-actions\">\r\n      ${!prompt.hidden && !prompt.deletedAt ? \r\n        `<button class=\"action-btn favorite-btn\" title=\"${prompt.favorite ? 'Remove from favorites' : 'Add to favorites'}\">\r\n          <img src=\"../assets/icons/fav-${prompt.favorite ? 'f' : 's'}32.png\" alt=\"Favorite\" width=\"16\" height=\"16\">\r\n        </button>` : ''\r\n      }\r\n      ${!prompt.hidden && !prompt.deletedAt ? \r\n        `<button class=\"action-btn clone-btn\" title=\"Clone prompt\">\r\n          <img src=\"../assets/icons/clone32.png\" alt=\"Clone\" width=\"16\" height=\"16\">\r\n        </button>` : ''\r\n      }\r\n      ${!prompt.deletedAt ? \r\n        `<button class=\"action-btn hide-btn\" title=\"${prompt.hidden ? 'Show prompt' : 'Hide prompt'}\">\r\n          <img src=\"../assets/icons/${prompt.hidden ? 'visible' : 'hide'}32.png\" alt=\"${prompt.hidden ? 'Show' : 'Hide'}\" width=\"16\" height=\"16\">\r\n        </button>` : ''\r\n      }\r\n      ${prompt.deletedAt ? \r\n        `<button class=\"action-btn restore-btn\" title=\"Restore prompt\">\r\n          <img src=\"../assets/icons/restore32.png\" alt=\"Restore\" width=\"16\" height=\"16\">\r\n        </button>` : \r\n        prompt.source === 'starter' ? '' :\r\n        `<button class=\"action-btn delete-btn\" title=\"Delete prompt\">\r\n          <img src=\"../assets/icons/delete32.png\" alt=\"Delete\" width=\"16\" height=\"16\">\r\n        </button>`\r\n      }\r\n    </div>\r\n  `;\r\n  \r\n  // Add click handler for card selection\r\n  card.addEventListener('click', (e) => {\r\n    // Don't trigger selection if clicking on action buttons\r\n    if ((e.target as HTMLElement).closest('.action-btn')) {\r\n      return;\r\n    }\r\n    \r\n    promptSelect.value = prompt.id;\r\n    onPromptSelectChange();\r\n    \r\n    // Update card selection\r\n    document.querySelectorAll('.prompt-card').forEach(c => c.classList.remove('selected'));\r\n    card.classList.add('selected');\r\n  });\r\n\r\n  // Add event listeners for action buttons (only for buttons that exist)\r\n  const favoriteBtn = card.querySelector('.favorite-btn') as HTMLButtonElement;\r\n  const cloneBtn = card.querySelector('.clone-btn') as HTMLButtonElement;\r\n  const hideBtn = card.querySelector('.hide-btn') as HTMLButtonElement;\r\n  const deleteBtn = card.querySelector('.delete-btn') as HTMLButtonElement;\r\n  const restoreBtn = card.querySelector('.restore-btn') as HTMLButtonElement;\r\n\r\n  // Only add favorite listener for active prompts\r\n  if (favoriteBtn && !prompt.hidden && !prompt.deletedAt) {\r\n    favoriteBtn.addEventListener('click', async (e) => {\r\n      e.stopPropagation();\r\n      try {\r\n        await toggleFavorite(prompt.id);\r\n        await refreshPrompts();\r\n        // Notify sidebar to refresh\r\n        chrome.runtime.sendMessage({ type: \"prompts:updated\" });\r\n      } catch (error) {\r\n        console.error('Failed to toggle favorite:', error);\r\n        showToast('Failed to update favorite status', 'error');\r\n      }\r\n    });\r\n  }\r\n\r\n  // Only add clone listener for active prompts\r\n  if (cloneBtn && !prompt.hidden && !prompt.deletedAt) {\r\n    cloneBtn.addEventListener('click', async (e) => {\r\n      e.stopPropagation();\r\n      try {\r\n        // Create a clone of the prompt\r\n        const clonedPrompt: Prompt = {\r\n          ...prompt,\r\n          id: crypto.randomUUID(),\r\n          title: `${prompt.title} (Copy)`,\r\n          source: 'user' as const,\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString(),\r\n          favorite: false,\r\n          hidden: false,\r\n          deletedAt: undefined\r\n        };\r\n        \r\n        await putPrompt(clonedPrompt);\r\n        await refreshPrompts();\r\n        showToast('Prompt cloned successfully', 'success');\r\n        // Notify sidebar to refresh\r\n        chrome.runtime.sendMessage({ type: \"prompts:updated\" });\r\n      } catch (error) {\r\n        console.error('Failed to clone prompt:', error);\r\n        showToast('Failed to clone prompt', 'error');\r\n      }\r\n    });\r\n  }\r\n\r\n  // Only add hide listener for non-deleted prompts\r\n  if (hideBtn && !prompt.deletedAt) {\r\n    hideBtn.addEventListener('click', async (e) => {\r\n      e.stopPropagation();\r\n      try {\r\n        await toggleHidden(prompt.id);\r\n        await refreshPrompts();\r\n        // Notify sidebar to refresh\r\n        chrome.runtime.sendMessage({ type: \"prompts:updated\" });\r\n      } catch (error) {\r\n        console.error('Failed to toggle hidden status:', error);\r\n        showToast('Failed to update hidden status', 'error');\r\n      }\r\n    });\r\n  }\r\n\r\n  // Only add delete listener for non-deleted prompts\r\n  if (deleteBtn && !prompt.deletedAt) {\r\n    deleteBtn.addEventListener('click', async (e) => {\r\n      e.stopPropagation();\r\n      if (confirm(`Are you sure you want to delete \"${prompt.title}\"?`)) {\r\n        try {\r\n          await deletePrompt(prompt.id);\r\n          await refreshPrompts();\r\n          showToast('Prompt deleted successfully', 'success');\r\n          // Notify sidebar to refresh\r\n          chrome.runtime.sendMessage({ type: \"prompts:updated\" });\r\n        } catch (error) {\r\n          console.error('Failed to delete prompt:', error);\r\n          showToast('Failed to delete prompt', 'error');\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // Only add restore listener for deleted prompts\r\n  if (restoreBtn && prompt.deletedAt) {\r\n    restoreBtn.addEventListener('click', async (e) => {\r\n      e.stopPropagation();\r\n      try {\r\n        await restorePrompt(prompt.id);\r\n        await refreshPrompts();\r\n        showToast('Prompt restored successfully', 'success');\r\n        // Notify sidebar to refresh\r\n        chrome.runtime.sendMessage({ type: \"prompts:updated\" });\r\n      } catch (error) {\r\n        console.error('Failed to restore prompt:', error);\r\n        showToast('Failed to restore prompt', 'error');\r\n      }\r\n    });\r\n  }\r\n  \r\n  return card;\r\n}\r\n\r\n// Export prompts to JSON file\r\nasync function exportPrompts() {\r\n  try {\r\n    const prompts = await listPrompts();\r\n    const exportData = {\r\n      schemaVersion: '1.0.0',\r\n      timestamp: new Date().toISOString(),\r\n      prompts: prompts.filter(p => p.source === 'user') // Only export user prompts\r\n    };\r\n    \r\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\r\n    const url = URL.createObjectURL(blob);\r\n    \r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `prompt-library-export-${new Date().toISOString().split('T')[0]}.json`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n    \r\n    showToast('Export completed successfully', 'success');\r\n  } catch (error) {\r\n    console.error('Export failed:', error);\r\n    showToast('Export failed', 'error');\r\n  }\r\n}\r\n\r\n\r\n\r\n// Copy meta prompt to clipboard\r\nasync function copyMetaPrompt() {\r\n  try {\r\n    const metaPrompt = `Take the time to think through every detail. Reason carefully so you produce the best possible prompt.\r\n\r\nYou are a prompt-rewriting assistant. Your goal is to take any provided sample prompt and output a new, structured prompt in the JSON format below, following these rules:\r\n\r\nExtract key details from the sample prompt:\r\n\r\nRole and goal\r\n\r\nInputs needed, explicit and implied\r\n\r\nAny inputs already provided\r\n\r\nRequired output structure or sections\r\n\r\nAsk only the questions needed to collect missing inputs.\r\n\r\nAsk zero to five concise, targeted questions.\r\n\r\nInclude a question only if the answer is not already given.\r\n\r\nGenerate three appropriate tags based on topic, task type, and intended output.\r\n\r\nTags must be relevant, descriptive, and lowercase.\r\n\r\nAvoid generic placeholders unless they truly fit.\r\n\r\nRewrite the prompt so it clearly:\r\n\r\nStates the role and goal\r\n\r\nLists the exact questions to ask before starting, if any\r\n\r\nLists the known inputs\r\n\r\nLists the output sections in bullet form\r\n\r\nGenerate a randomized alphanumeric string exactly 20 characters long for the id field.\r\n\r\nOutput using this exact JSON template format:\r\n\r\n{\r\n  \"schemaVersion\": \"1.0.0\",\r\n  \"timestamp\": \"[current UTC timestamp in ISO 8601 format]\",\r\n  \"prompts\": [\r\n    {\r\n      \"id\": \"[randomized 20-character alphanumeric ID]\",\r\n      \"title\": \"[Short descriptive title for the new prompt]\",\r\n      \"body\": \"[Full rewritten prompt text in the new format]\",\r\n      \"tags\": [\"tag1\", \"tag2\", \"tag3\"],\r\n      \"source\": \"user\",\r\n      \"favorite\": false,\r\n      \"hidden\": false,\r\n      \"createdAt\": \"[current UTC timestamp in ISO 8601 format]\",\r\n      \"updatedAt\": \"[current UTC timestamp in ISO 8601 format]\",\r\n      \"version\": 1\r\n    }\r\n  ]\r\n}\r\n\r\nKeep language direct and concise. Do not add filler or commentary.\r\n\r\nEnsure the body uses the \"questions first, then execute\" approach before producing the output. If no questions are needed, proceed directly to execution details.`;\r\n    \r\n    await navigator.clipboard.writeText(metaPrompt);\r\n    showToast('Meta prompt copied to clipboard', 'success');\r\n  } catch (error) {\r\n    console.error('Failed to copy meta prompt:', error);\r\n    showToast('Failed to copy meta prompt', 'error');\r\n  }\r\n}\r\n\r\n// Handle import file selection\r\nasync function handleImport(event: Event) {\r\n  const target = event.target as HTMLInputElement;\r\n  const file = target.files?.[0];\r\n  if (!file) return;\r\n  \r\n  try {\r\n    const text = await file.text();\r\n    const importData = JSON.parse(text);\r\n    \r\n    if (!importData.prompts || !Array.isArray(importData.prompts)) {\r\n      throw new Error('Invalid import file format');\r\n    }\r\n    \r\n    // Perform merge\r\n    await mergePrompts(importData.prompts);\r\n    \r\n    showToast('Import completed successfully', 'success');\r\n  } catch (error) {\r\n    console.error('Import failed:', error);\r\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\r\n    showToast(`Import failed: ${errorMessage}`, 'error');\r\n  } finally {\r\n    // Reset file input\r\n    target.value = '';\r\n  }\r\n}\r\n\r\n// Merge prompts with conflict resolution\r\nasync function mergePrompts(importedPrompts: Prompt[]) {\r\n  const existingPrompts = await listPrompts();\r\n  const existingMap = new Map(existingPrompts.map(p => [p.id, p]));\r\n  \r\n  let added = 0;\r\n  let updated = 0;\r\n  let skipped = 0;\r\n  \r\n  for (const imported of importedPrompts) {\r\n    const existing = existingMap.get(imported.id);\r\n    \r\n    if (!existing) {\r\n      // New prompt\r\n      await putPrompt(imported);\r\n      added++;\r\n    } else if (existing.source === 'starter') {\r\n      // Never modify starter prompts\r\n      skipped++;\r\n    } else if (new Date(imported.updatedAt) > new Date(existing.updatedAt)) {\r\n      // Imported is newer\r\n      await putPrompt(imported);\r\n      updated++;\r\n    } else {\r\n      // Existing is newer or same\r\n      skipped++;\r\n    }\r\n  }\r\n  \r\n  showToast(`Merge completed: ${added} added, ${updated} updated, ${skipped} skipped`, 'info');\r\n  \r\n      // Reload prompts\r\n    await loadPrompts();\r\n    \r\n    // Notify sidebar to refresh\r\n    chrome.runtime.sendMessage({ type: \"prompts:updated\" });\r\n  }\r\n\r\n\r\n\r\n// Show toast notification\r\nfunction showToast(message: string, type: 'success' | 'error' | 'info' = 'info') {\r\n  const toast = document.createElement('div');\r\n  toast.className = `toast toast-${type}`;\r\n  toast.innerHTML = `\r\n    <div class=\"toast-header\">\r\n      <span class=\"toast-title\">${type.charAt(0).toUpperCase() + type.slice(1)}</span>\r\n      <button class=\"toast-close\" onclick=\"this.parentElement.parentElement.remove()\">\u00D7</button>\r\n    </div>\r\n    <div class=\"toast-message\">${message}</div>\r\n  `;\r\n  \r\n  toastContainer.appendChild(toast);\r\n  \r\n  // Auto-remove after 5 seconds\r\n  setTimeout(() => {\r\n    if (toast.parentNode) {\r\n      toast.remove();\r\n    }\r\n  }, 5000);\r\n}\r\n\r\n// Utility functions\r\nfunction escapeHtml(text: string): string {\r\n  const div = document.createElement('div');\r\n  div.textContent = text;\r\n  return div.innerHTML;\r\n}\r\n\r\n// Consistent sorting function for all prompt lists\r\nfunction sortPromptsByPriority(prompts: Prompt[]): Prompt[] {\r\n  return [...prompts].sort((a, b) => {\r\n    // First: sort by favorite status (favorites come first)\r\n    if (a.favorite && !b.favorite) return -1;\r\n    if (!a.favorite && b.favorite) return 1;\r\n    \r\n    // Within the same favorite status, sort by usage count then alphabetical\r\n    // Since the database already provides this order, we maintain it\r\n    // This ensures consistent sorting across all sections\r\n    return 0; // Maintain database order within each favorite group\r\n  });\r\n}\r\n\r\n// Initialize when DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', init);\r\n\r\n\r\n"],
  "mappings": "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",
  "names": ["totalUsed"]
}
