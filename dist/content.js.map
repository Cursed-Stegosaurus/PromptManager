{
  "version": 3,
  "sources": ["../src/content/content.ts"],
  "sourcesContent": ["// Content script for prompt insertion\r\n// This script runs in the context of web pages\r\n\r\n// Listen for messages from the extension\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n  if (message.type === \"insert\") {\r\n    const success = insertText(message.text);\r\n    sendResponse({ success });\r\n  }\r\n});\r\n\r\n// Function to insert text into the focused element\r\nfunction insertText(text: string): boolean {\r\n  const activeElement = document.activeElement as HTMLElement;\r\n  if (!activeElement) return false;\r\n\r\n  // Try to insert into the active element\r\n  if (tryInsertIntoElement(activeElement, text)) {\r\n    return true;\r\n  }\r\n\r\n  // Try to find a suitable input field\r\n  const inputs = document.querySelectorAll('input[type=\"text\"], input[type=\"email\"], input[type=\"password\"], textarea, [contenteditable=\"true\"]');\r\n  for (const input of inputs) {\r\n    if (tryInsertIntoElement(input as HTMLElement, text)) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n// Try to insert text into a specific element\r\nfunction tryInsertIntoElement(element: HTMLElement, text: string): boolean {\r\n  try {\r\n    // Handle input elements\r\n    if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\r\n      const start = element.selectionStart ?? element.value.length;\r\n      const end = element.selectionEnd ?? element.value.length;\r\n      \r\n      element.setRangeText(text, start, end, \"end\");\r\n      element.dispatchEvent(new Event(\"input\", { bubbles: true }));\r\n      element.focus();\r\n      return true;\r\n    }\r\n\r\n    // Handle contenteditable elements\r\n    if (element.contentEditable === \"true\") {\r\n      const selection = window.getSelection();\r\n      if (selection) {\r\n        selection.deleteFromDocument();\r\n        const textNode = document.createTextNode(text);\r\n        \r\n        if (selection.rangeCount === 0) {\r\n          const range = document.createRange();\r\n          range.selectNodeContents(element);\r\n          selection.addRange(range);\r\n        }\r\n        \r\n        const range = selection.getRangeAt(0);\r\n        range.insertNode(textNode);\r\n        range.setStartAfter(textNode);\r\n        range.setEndAfter(textNode);\r\n        selection.removeAllRanges();\r\n        selection.addRange(range);\r\n        \r\n        element.focus();\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  } catch (error) {\r\n    console.error(\"Failed to insert text:\", error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Add keyboard shortcut for quick prompt insertion\r\ndocument.addEventListener(\"keydown\", (event) => {\r\n  // Ctrl+Shift+P for prompt insertion\r\n  if (event.ctrlKey && event.shiftKey && event.key === \"P\") {\r\n    event.preventDefault();\r\n    \r\n    // Request the last used prompt from the extension\r\n    chrome.runtime.sendMessage({ type: \"getLastPrompt\" }, (response) => {\r\n      if (response && response.prompt) {\r\n        insertText(response.prompt.body);\r\n      }\r\n    });\r\n  }\r\n});\r\n"],
  "mappings": ";AAIA,OAAO,QAAQ,UAAU,YAAY,CAAC,SAAS,QAAQ,iBAAiB;AACtE,MAAI,QAAQ,SAAS,UAAU;AAC7B,UAAM,UAAU,WAAW,QAAQ,IAAI;AACvC,iBAAa,EAAE,QAAQ,CAAC;AAAA,EAC1B;AACF,CAAC;AAGD,SAAS,WAAW,MAAuB;AACzC,QAAM,gBAAgB,SAAS;AAC/B,MAAI,CAAC;AAAe,WAAO;AAG3B,MAAI,qBAAqB,eAAe,IAAI,GAAG;AAC7C,WAAO;AAAA,EACT;AAGA,QAAM,SAAS,SAAS,iBAAiB,qGAAqG;AAC9I,aAAW,SAAS,QAAQ;AAC1B,QAAI,qBAAqB,OAAsB,IAAI,GAAG;AACpD,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO;AACT;AAGA,SAAS,qBAAqB,SAAsB,MAAuB;AACzE,MAAI;AAEF,QAAI,mBAAmB,oBAAoB,mBAAmB,qBAAqB;AACjF,YAAM,QAAQ,QAAQ,kBAAkB,QAAQ,MAAM;AACtD,YAAM,MAAM,QAAQ,gBAAgB,QAAQ,MAAM;AAElD,cAAQ,aAAa,MAAM,OAAO,KAAK,KAAK;AAC5C,cAAQ,cAAc,IAAI,MAAM,SAAS,EAAE,SAAS,KAAK,CAAC,CAAC;AAC3D,cAAQ,MAAM;AACd,aAAO;AAAA,IACT;AAGA,QAAI,QAAQ,oBAAoB,QAAQ;AACtC,YAAM,YAAY,OAAO,aAAa;AACtC,UAAI,WAAW;AACb,kBAAU,mBAAmB;AAC7B,cAAM,WAAW,SAAS,eAAe,IAAI;AAE7C,YAAI,UAAU,eAAe,GAAG;AAC9B,gBAAMA,SAAQ,SAAS,YAAY;AACnC,UAAAA,OAAM,mBAAmB,OAAO;AAChC,oBAAU,SAASA,MAAK;AAAA,QAC1B;AAEA,cAAM,QAAQ,UAAU,WAAW,CAAC;AACpC,cAAM,WAAW,QAAQ;AACzB,cAAM,cAAc,QAAQ;AAC5B,cAAM,YAAY,QAAQ;AAC1B,kBAAU,gBAAgB;AAC1B,kBAAU,SAAS,KAAK;AAExB,gBAAQ,MAAM;AACd,eAAO;AAAA,MACT;AAAA,IACF;AAEA,WAAO;AAAA,EACT,SAAS,OAAO;AACd,YAAQ,MAAM,0BAA0B,KAAK;AAC7C,WAAO;AAAA,EACT;AACF;AAGA,SAAS,iBAAiB,WAAW,CAAC,UAAU;AAE9C,MAAI,MAAM,WAAW,MAAM,YAAY,MAAM,QAAQ,KAAK;AACxD,UAAM,eAAe;AAGrB,WAAO,QAAQ,YAAY,EAAE,MAAM,gBAAgB,GAAG,CAAC,aAAa;AAClE,UAAI,YAAY,SAAS,QAAQ;AAC/B,mBAAW,SAAS,OAAO,IAAI;AAAA,MACjC;AAAA,IACF,CAAC;AAAA,EACH;AACF,CAAC;",
  "names": ["range"]
}
